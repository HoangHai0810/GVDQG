"use strict";
PULSE.app.templates.clubStadium = ' <a href="{{ stadiumUrl }}"><span class="stadium">{{ name }}</span></a> ', PULSE.app.templates.clubmatch = '<div class="day"> <time> {{day.day}} <strong>{{day.other}}</strong> </time> {{#matches}} {{#isFixture}} <span class="embeddableMatchOverviewContainer"> <span class="overview"> <a href="{{ matchUrl }}" class="matchAbridged {{^matchUrl}}matchAbridged--no-link{{/matchUrl}}" data-matchid="{{ id }}"> <div class="embeddableMatchInfoContainer"> <span class="teamName"><abbr title="{{ teams.0.team.club.name }}">{{ teams.0.team.club.abbr }}</abbr></span> <span class="badge badge-image-container" data-widget="club-badge-image" data-size="25"> <img class="badge-image badge-image--25 js-badge-image" src="{{ teams.0.clubBadge }}" srcset="{{ teams.0.clubBadge }}, {{ teams.0.clubBadgeRetina }} 2x"> </span> <time datetime="14:00">{{ kickOffTime }}</time> <span class="badge badge-image-container" data-widget="club-badge-image" data-size="25"> <img class="badge-image badge-image--25 js-badge-image" src="{{ teams.1.clubBadge }}" srcset="{{ teams.1.clubBadge }}, {{ teams.1.clubBadgeRetina }} 2x"> </span> <span class="teamName away"><abbr title="{{ teams.1.team.club.name }}">{{ teams.1.team.club.abbr }}</abbr></span> </div> <div data-id="{{ id }}" class="matchSummaryBroadcastersContainer"></div> <span class="icn arrow-right"></span> </a> </span> </span> {{/isFixture}} {{#isLive}} <span class="embeddableMatchOverviewContainer"> <span class="overview"> <a href="{{ matchUrl }}" class="matchAbridged {{^matchUrl}}matchAbridged--no-link disabled{{/matchUrl}} live form js-live-fixture" data-fixture-id="{{ id }}"> <div class="embeddableMatchInfoContainer"> <strong class="minutes matchMinuteContainer js-minutes" role="timer">{{time}}</strong> <span class="teamName"><abbr title="{{ teams.0.team.club.name }}">{{ teams.0.team.club.abbr }}</abbr></span> <span class="badge badge-image-container" data-widget="club-badge-image" data-size="25"> <img class="badge-image badge-image--25 js-badge-image" src="{{ teams.0.clubBadge }}" srcset="{{ teams.0.clubBadge }}, {{ teams.0.clubBadgeRetina }} 2x"> </span> <span class="score js-score">{{ teams.0.score }}<span>-</span>{{ teams.1.score }}</span> <span class="badge badge-image-container" data-widget="club-badge-image" data-size="25"> <img class="badge-image badge-image--25 js-badge-image" src="{{ teams.1.clubBadge }}" srcset="{{ teams.1.clubBadge }}, {{ teams.1.clubBadgeRetina }} 2x"> </span> <span class="teamName away"><abbr title="{{ teams.1.team.club.name }}">{{ teams.1.team.club.abbr }}</abbr></span> <div data-id="{{ id }}" class="matchSummaryBroadcastersContainer"></div> </div> <span class="icn arrow-right"></span> </a> </span> </span> {{/isLive}} {{#isResult}} <span class="embeddableMatchOverviewContainer"> <span class="overview"> <a href="{{ matchUrl }}" class="matchAbridged {{^matchUrl}}matchAbridged--no-link disabled{{/matchUrl}} {{#teamOutcome}}form{{/teamOutcome}}"> {{#teamOutcome}} <span class="teamForm {{ outcomeClass }}">{{ teamOutcome }}</span> {{/teamOutcome}} <span class="teamName"><abbr title="{{ teams.0.team.club.name }}">{{ teams.0.team.club.abbr }}</abbr></span> <span class="badge badge-image-container" data-widget="club-badge-image" data-size="25"> <img class="badge-image badge-image--25 js-badge-image" src="{{ teams.0.clubBadge }}" srcset="{{ teams.0.clubBadge }}, {{ teams.0.clubBadgeRetina }} 2x"> </span> <span class="score">{{ teams.0.score }}<span>-</span>{{ teams.1.score }}</span> <span class="badge badge-image-container" data-widget="club-badge-image" data-size="25"> <img class="badge-image badge-image--25 js-badge-image" src="{{ teams.1.clubBadge }}" srcset="{{ teams.1.clubBadge }}, {{ teams.1.clubBadgeRetina }} 2x"> </span> <span class="teamName away"><abbr title="{{ teams.1.team.club.name }}">{{ teams.1.team.club.abbr }}</abbr></span> <span class="icn arrow-right"></span> </a> </span> </span> {{/isResult}} {{/matches}} </div> ', PULSE.app.templates.embeddablematchdate = '<div class="day"> <time>{{ date }}</time> <span class="{{ date }}MatchContainer"> </span> </div>', PULSE.app.templates.refereematchdate = '<div class="day"> <time>{{ date }}</time> <span class="{{ date }}MatchContainer"> </span> </div> ', PULSE.app.templates.squadmember = '<li> <a href="{{ url }}" class="playerOverviewCard {{ activeClass }}"> <header class="squadPlayerHeader"> <img class="img playerPhotoContainer" data-player="{{ optaId }}" data-size="{{ imageSize }}" src="{{ playerImage }}"> <span class="playerCardInfo"> {{#shirtNum}} <span class="number">{{ shirtNum }}</span> {{/shirtNum}} <h4 class="name">{{ name.display }}</h4> {{#positionLabel}} <span class="position">{{positionLabel}}</span> {{/positionLabel}} </span> </header> <ul class="squadPlayerStats"> {{#nationality}} <li class="nationality"> <dl> <dt class="label">{{ label }}</dt> <dd class="info"> <span class="flag {{ isoCode }}"></span> <span class="playerCountry">{{ country }}</span> </dd> </dl> </li> {{/nationality}} {{#stats}} <li> <dl> <dt class="label">{{ label }}</dt> <dd class="info">{{ stat }}</dd> </dl> </li> {{/stats}} </ul> <span class="btn widget-button">View Player<span class="icn arrow-right"></span></span> <span class="icn arrow-right linkIndicator"></span> </a> </li>', PULSE.app.templates.squadmemberlist = '<h6>{{ positionLabel }}</h6> <ul> {{#players}} <li class="squadMember"> <a href="{{ url }}"> <span class="squadNumber">{{shirtNum}}</span> {{ name.display }} <span class="icn arrow-right"></span> </a> </li> {{/players}} </ul>', PULSE.app.templates.clubstandings = '{{#table}} <tr class="{{ rowClass }}"> <td class="pos"> {{ position }} <span class="movement {{ movement }}"></span> </td> <td class="team"> <a href="{{ url }}"> <span class="badge badge-image-container" data-widget="club-badge-image" data-size="20"> <img class="badge-image badge-image--20 js-badge-image" src="{{ clubBadge }}" srcset="{{ clubBadge }}, {{ clubBadgeRetina }} 2x"> </span> <span class="long">{{ teamName }}</span> <span class="short">{{ teamName }}</span> </a> </td> <td>{{ overall.played }}</td> <td>{{ overall.goalsDifference}}</td> <td class="points">{{ overall.points }}</td> </tr> {{/table}} ',
    function(e, t, a) {
        var s = 0;
        e.clubArchive = function(e, t) {
            var n = this;
            n.widget = e;
            var i = n.widget.parentNode,
                l = t.length;
            if (n.widget.hasChildNodes() || s++, s === l) {
                var o = document.createElement("div"),
                    r = document.createElement("span"),
                    m = document.createTextNode(a.lookup("label.nocontentForClubArchive"));
                r.appendChild(m), o.appendChild(r), o.className = "noContentContainer", i.insertBefore(o, t[0])
            }
        };
        ! function() {
            for (var t = document.querySelectorAll('[data-widget="club-archive"]'), a = 0; a < t.length; a++) new e.clubArchive(t[a], t)
        }()
    }(PULSE.app, PULSE.core, PULSE.I18N),
    function(e, t, a, s) {
        e.clubHeader = function(e, t) {
            let a = this;
            a.element = e, a.teamId = a.element.getAttribute("data-team"), a.id = a.element.getAttribute("data-id"), a.stadiumName = a.element.getElementsByClassName("stadiumName"), a.compSeasonId = a.element.getAttribute("data-compseason");
            let s = document.getElementById("mainContent");
            a.teamId && (s.className = "sidebarContainer " + a.teamId);
            let n = a.element.getElementsByClassName("clubBadgeFallback"),
                i = a.element.getElementsByClassName("badgeContainer");
            n && n.length > 0 && i && i.length > 0 && (n[0].onerror = function() {
                i[0].style.display = "none"
            }, n[0].setAttribute("src", n[0].getAttribute("src"))), a.initData()
        }, e.clubHeader.prototype.initData = function() {
            let a = {
                url: e.environment.api + "/football/clubs/" + this.id,
                method: "GET",
                callback: this.renderTeamGround,
                constant: !0,
                target: this
            };
            t.data.manager.add(a)
        }, e.clubHeader.prototype.renderTeamGround = function(t) {
            let a, n = this;
            for (let e = 0; e < t.teams.length; e++) t.teams[e].id == n.id && (a = t.teams[e].grounds);
            if (a && a.length) {
                let i = a.filter((e => {
                        if (e.compSeasonIds.includes(Number(n.compSeasonId))) return e
                    }))[0] || {},
                    l = t.name.replace(/\s/g, "-");
                i.stadiumUrl = s.generateContentUrl("stadium", n.id, l);
                let o = Mustache.render(e.templates.clubStadium, i);
                n.stadiumName[0].innerHTML = o
            }
        };
        let n = document.querySelectorAll('[data-widget="club-header"]');
        for (let t = 0; t < n.length; t++) new e.clubHeader(n[t], {})
    }(PULSE.app, PULSE.core, PULSE.ui, PULSE.app.common),
    function(e, t, a, s, n) {
        const i = 3e4;
        let l = function(t, s) {
                let i;
                switch (t.matchDate = n.lookup("label.tbc.date"), t.kickOffTime = n.lookup("label.tbc"), t.phase) {
                    case "P":
                    case "S":
                        break;
                    default:
                        switch (t.kickoff.completeness) {
                            case 2:
                                t.matchDate = moment(t.kickoff.millis).tz(moment.tz.guess()).format("dddd D MMMM YYYY"), t.kickOffTime = n.lookup("label.tbc");
                                break;
                            case 3:
                                i = new Date(t.kickoff.millis), t.matchDate = moment(t.kickoff.millis).tz(moment.tz.guess()).format("dddd D MMMM YYYY"), t.kickOffTime = moment(i).locale(e.language).format("HH:mm");
                                break;
                            case 1:
                                i = new Date(t.kickoff.millis), t.kickOffTime = moment(i).tz(moment.tz.guess()).format("HH:mm")
                        }
                }
                if (t.teams) {
                    let n, i;
                    t.teams.map((function(e) {
                        e.team.id === s ? n = e.score : i = e.score, e.team.club || (e.team.club = {}), e.team.club.abbr || (e.team.club.abbr = "TBC"), e.team.name || (e.team.abbr = "TBC"), e.team.shortName || (e.team.shortName = e.team.name), e.opta = e.team.altIds && e.team.altIds.opta ? e.team.altIds.opta : "", e.clubBadge = a.getClubBadge(e.opta, "20"), e.clubBadgeRetina = a.getClubBadge(e.opta, "20", !0)
                    })), t.teamOutcome = "", void 0 !== n && void 0 !== i && "C" === t.status && (n > i ? (t.teamOutcome = "W", t.outcomeClass = "win") : i > n ? (t.teamOutcome = "L", t.outcomeClass = "lose") : (t.teamOutcome = "D", t.outcomeClass = "draw")), t.matchUrl = e.common.getMatchCentreUrl(t), t.matchUrl = "" !== t.matchUrl && t.matchUrl
                }
                return "C" === t.status ? t.isResult = !0 : "L" === t.status ? (t.isLive = !0, t.time = a.getEventTime(t)) : t.isFixture = !0, t
            },
            o = function(e) {
                let t = new Date(e);
                return {
                    day: moment(t).format("dddd"),
                    other: moment(t).format("D MMMM")
                }
            };
        e.clubMatches = function(t, s) {
            let n = this;
            if (n.element = t, n.isRendered = t.getAttribute("data-rendered") || !1, n.isRendered && !s.comp) return;
            n.isSummary = t.getAttribute("data-summary"), n.isRefereeSummary = t.getAttribute("data-referee-summary"), n.fixturesIds = t.getAttribute("data-fixturesids");
            s.noData;
            if (n.urlConfig = {}, n.urlConfig.compSeasons = s.season, n.urlConfig.comps = s.comp || t.getAttribute("data-comp"), n.urlConfig.teams = s.team || t.getAttribute("data-team"), n.urlConfig.statuses = t.getAttribute("data-statuses"), n.urlConfig.pageSize = t.getAttribute("data-pagesize"), n.urlConfig.startDate = n.element.getAttribute("data-start-date"), n.urlConfig.endDate = n.element.getAttribute("data-end-date"), n.urlConfig.page = 0, n.urlConfig.gameweeks = t.getAttribute("data-gameweek"), n.urlConfig.altIds = !0, n.dm = {}, n.fixturesPolling = !1, "C" === n.urlConfig.statuses && (n.urlConfig.sort = "desc"), t.getAttribute("data-sort") && (n.urlConfig.sort = t.getAttribute("data-sort")), n.broadcastingConfig = {}, t.getAttribute("data-broadcaster-location") && (n.broadcastingConfig.countryCodes = t.getAttribute("data-broadcaster-location")), n.matchListContainer = n.element.getElementsByClassName("matchListContainer"), n.fixturesAbridged = n.element.getElementsByClassName("fixturesAbridged"), n.matchListContainer && n.matchListContainer.length, n.teamId = n.urlConfig.teams, n.teamId || !n.fixturesIds) n.initData(n.urlConfig, !1, "teamData");
            else {
                new a.getBroadcasters(n.element, {
                    containerClass: "matchSummaryBroadcastersContainer"
                }, n.broadcastingConfig);
                a.renderKickOffData(n.element, {
                    className: "renderKOContainer",
                    format: "HH:mm"
                }), n.matchListContainer = n.element.getElementsByClassName("matchListContainer"), n.matchListContainer && n.matchListContainer.length > 0 && (n.isRefereeSummary ? a.orderKickOffs(n.element, n.matchListContainer[0], e.templates.refereematchdate, {
                    format: "dddd D MMMM YYYY",
                    className: "embeddableMatchContainer"
                }) : a.orderKickOffs(n.element, n.matchListContainer[0], e.templates.embeddablematchdate, {
                    format: "dddd D MMMM",
                    className: "embeddableMatchContainer"
                })), n.isRefereeSummary || n.pollFixtures(!1)
            }
            n.element.setAttribute("data-rendered", !0)
        }, e.clubMatches.prototype.pollFixtures = function() {
            let e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
            const t = this,
                a = {
                    statuses: "U,L,C",
                    pageSize: t.urlConfig.pageSize,
                    startDate: t.urlConfig.startDate,
                    endDate: t.urlConfig.endDate,
                    page: t.urlConfig.page,
                    gameweeks: t.urlConfig.gameweeks,
                    altIds: t.urlConfig.altIds,
                    comps: t.urlConfig.comps,
                    teams: t.urlConfig.teams
                };
            t.initData(a, e, "fixturesPoll")
        }, e.clubMatches.prototype.initData = function(t) {
            let a = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                s = arguments.length > 2 ? arguments[2] : void 0,
                n = {
                    url: e.common.createApiPath("fixtures.all", t),
                    method: "GET",
                    callback: this.renderMatches,
                    target: this
                };
            a && (n.interval = i), this.startData(n, s)
        }, e.clubMatches.prototype.startData = function(e, a) {
            this.dm[a] = t.data.manager.add(e)
        }, e.clubMatches.prototype.refresh = function() {
            this.element.style.display = ""
        }, e.clubMatches.prototype.renderMatches = function(t) {
            let s = this,
                n = !0;
            if (s.thisData = t, t && t.content) {
                let i = t.content,
                    r = [];
                const m = function(e) {
                    let t = !1;
                    return e.forEach((e => {
                        if ("L" === e.status) return t = !0, t
                    })), t
                }(i);
                m && !s.fixturesPolling && (s.fixturesPolling = !0, s.pollFixtures()), !m && s.dm ? .fixturesPoll && (s.dm.fixturesPoll.stop(), s.fixturesPolling = !1);
                let d = function(e) {
                    let t = {};
                    if (e && e.length) {
                        let a;
                        for (let s = 0; s < e.length; s++) 3 === e[s].kickoff.completeness && (a = l(e[s]), t[a.matchDate] || (t[a.matchDate] = []), t[a.matchDate].push(a))
                    }
                    return t
                }(i);
                if (s.matchListContainer.length > 0) {
                    let t = "";
                    for (let a in d)
                        if (d[a].forEach((function(e) {
                                e = l(e, s.teamId), r.push(e.id);
                                const t = s.element.querySelector('[data-fixture-id="' + e.id + '"]');
                                if ("L" === e.status && t) {
                                    const a = t.querySelector(".js-minutes"),
                                        s = t.querySelector(".js-score");
                                    a.innerHTML = e.time, s.innerHTML = `${e.teams[0].score}<span>-</span>${e.teams[1].score}`, n = !1
                                }
                            })), n) {
                            let s = o(a);
                            t += Mustache.render(e.templates.clubmatch, {
                                day: s,
                                matches: d[a]
                            })
                        }
                    n && (s.matchListContainer[0].innerHTML = t), s.matchListContainer && s.matchListContainer.length > 0 && e.clubBadge && (s.clubBadge = new e.clubBadge(s.matchListContainer[0], !0))
                }
                if (s.element.style.display = "", r.length > 0) {
                    new a.getBroadcasters(s.element, {
                        containerClass: "matchSummaryBroadcastersContainer"
                    })
                }
            } else s.element.style.display = "none"
        };
        let r = document.querySelectorAll('[data-widget="club-matches"]');
        r = Array.prototype.map.call(r, (function(t) {
            return new e.clubMatches(t, {})
        }))
    }(PULSE.app, PULSE.core, PULSE.app.common, PULSE.ui, PULSE.I18N),
    function(e, t, a) {
        e.clubNav = function(e, t) {};
        let s = document.querySelectorAll('[data-ui-more-nav="club-nav"]');
        for (let e = 0; e < s.length; e++) {
            let a = {
                navWrap: s[e],
                moreLabel: "More",
                iconClass: "menu-more"
            };
            new t.moreNav(a)
        }
    }(PULSE.app, PULSE.ui, PULSE.I18N),
    function(e, t, a, s, n) {
        e.clubSquad = function(t, a) {
            var s = this;
            s.element = t, s.requestConfig = {}, s.requestConfig.compSeasonId = s.element.getAttribute("data-comp-season"), s.requestConfig.id = s.element.getAttribute("data-team"), s.requestConfig.altIds = !0, s.requestConfig.compCodeForActivePlayer = e.defaultCompCode, s.squadListContainer = s.element.getElementsByClassName("squadListContainer"), s.filterControllerElement = s.element.querySelector("section.pageFilter"), s.filterControllerElement && (s.compSeasonsInit = !1, s.filterController = new e.common.listFilterController(s.filterControllerElement, {
                dropdowns: e.filterGroups[s.filterControllerElement.getAttribute("data-filter-config")],
                delegate: s
            }))
        }, e.clubSquad.prototype.filterCleared = function(e) {
            this.filterUpdated(e)
        }, e.clubSquad.prototype.filterUpdated = function(t, s, n) {
            var i = this;
            !i.compSeasonsInit && t[0] && (i.compSeasonsInit = new a.listFilterClubSeasons(t[0].state.list, i.requestConfig.id, i.filterController));
            var l = i.requestConfig.compSeasonId;
            t.map((function(t) {
                var a = s && -1 != t.autoId && null != t.autoId ? t.autoId : t.state.id;
                if ("compSeasons" === t.name) i.requestConfig.compSeasonId = a, "0" === t.state.index ? i.requestConfig.date = moment(new Date).locale(e.language).format("YYYY-MM-DD") : i.requestConfig.date = void 0
            })), s && l == i.requestConfig.compSeasonId || i.initData()
        }, e.clubSquad.prototype.initData = function() {
            var t = this,
                a = {
                    url: e.common.createApiPath("teams.single.staff", t.requestConfig),
                    method: "GET",
                    callback: t.renderSquad,
                    target: this
                };
            !t.dataLoader && t.squadListContainer && t.squadListContainer.length > 0 ? t.dataLoader = new s.loader(t.squadListContainer[0], {
                init: !0,
                loaderTemplate: e.templates.loader
            }) : t.dataLoader && t.dataLoader.addLoader(), this.startData(a)
        }, e.clubSquad.prototype.startData = function(e) {
            t.data.manager.add(e)
        }, e.clubSquad.prototype.renderSquad = function(t) {
            var s, i, l, o, r, m, d = this;
            if (t && t.players) {
                var c = "";
                (s = t.players, i = [], l = [], o = [], r = [], m = [], s && s.length > 0 && (s.forEach((function(e) {
                    "GOALKEEPER" === e.latestPosition ? i.push(e) : "DEFENDER" === e.latestPosition ? l.push(e) : "MIDFIELDER" === e.latestPosition ? o.push(e) : "FORWARD" === e.latestPosition && r.push(e)
                })), l = l.concat(o, r), m = i.concat(l)), m).forEach((function(t) {
                    var s = function(e) {
                        var t = e;
                        return t.url = a.generateContentUrl("player", t.id, t.name.display.replace(new RegExp(" ", "g"), "-")), t.imageSize = "110x140", t.playerImage = a.getDefaultPlayerImg(t.imageSize), t.optaId = t.altIds && t.altIds.opta ? t.altIds.opta : void 0, t.activeClass = t.active ? "active" : "inactive", t.info && t.info.shirtNum && (t.shirtNum = t.info.shirtNum), t.latestPosition && (t.positionLabel = n.lookup("label." + t.latestPosition.toLowerCase())), t.nationalTeam ? t.nationality = {
                            country: t.nationalTeam.country,
                            isoCode: t.nationalTeam.isoCode,
                            label: n.lookup("label.player.nationality")
                        } : t.birth && t.birth.country && t.birth.country.country && t.birth.country.isoCode && (t.nationality = {
                            country: t.birth.country.country,
                            isoCode: t.birth.country.isoCode,
                            label: n.lookup("label.player.nationality")
                        }), t.stats = [], t.stats.push({
                            label: n.lookup("label.stat.appearances"),
                            stat: null != t.appearances ? t.appearances : "0"
                        }), !t.latestPosition || "GOALKEEPER" !== t.latestPosition && "DEFENDER" !== t.latestPosition || t.stats.push({
                            label: n.lookup("label.stat.clean_sheet"),
                            stat: null != t.cleanSheets ? t.cleanSheets : "0"
                        }), t.latestPosition && "GOALKEEPER" != t.latestPosition && t.stats.push({
                            label: n.lookup("label.stat.goals"),
                            stat: null != t.goals ? t.goals : "0"
                        }), t.latestPosition && "GOALKEEPER" != t.latestPosition && "DEFENDER" != t.latestPosition && t.stats.push({
                            label: n.lookup("label.stat.assists"),
                            stat: null != t.assists ? t.assists : "0"
                        }), t
                    }(t);
                    c += Mustache.render(e.templates.squadmember, s)
                })), d.squadListContainer && d.squadListContainer.length > 0 && (d.squadListContainer[0].innerHTML = c, a.getPhotosForContainer(d.squadListContainer[0]))
            }
        };
        e.filterGroups.setData((function() {
            for (var t = document.querySelectorAll('[data-widget="club-squad"]'), a = 0; a < t.length; a++) new e.clubSquad(t[a], {
                noData: !0
            })
        }))
    }(PULSE.app, PULSE.core, PULSE.app.common, PULSE.ui, PULSE.I18N),
    function(e, t, a, s, n) {
        let i = function(e) {
                let t = {};
                return e && e.length > 0 && e.forEach((function(e) {
                    let s = e.latestPosition ? e.latestPosition : "Other";
                    t[s] || (t[s] = []), t[s].push(function(e) {
                        let t = e;
                        return t.url = a.generateContentUrl("player", t.id, t.name.display.replace(new RegExp(" ", "g"), "-")), t.shirtNum = t.info && t.info.shirtNum ? t.info.shirtNum : "", t.latestPosition && (t.positionLabel = n.lookup("label." + t.latestPosition.toLowerCase())), t
                    }(e))
                })), t
            },
            l = function(t, a) {
                let s = "";
                if (t && t[a]) {
                    let i = {
                        players: t[a],
                        positionLabel: n.lookup("label." + a.toLowerCase())
                    };
                    s += Mustache.render(e.templates.squadmemberlist, i)
                }
                return s
            };
        e.clubSquadList = function(t, a) {
            let n = this;
            n.element = t, n.requestConfig = {}, n.requestConfig.date = moment(new Date).locale(e.language).format("YYYY-MM-DD"), n.requestConfig.compSeasonId = a && a.season ? a.season : n.element.getAttribute("data-comp-season"), n.requestConfig.id = a && a.team ? a.team : n.element.getAttribute("data-team"), n.requestConfig.altIds = !0, n.squadListContainer = n.element.getElementsByClassName("cubSquadListContainer"), n.squadListContainer && n.squadListContainer.length > 0 && (n.dataLoader = new s.loader(n.squadListContainer[0], {
                init: !0,
                loaderTemplate: e.templates.loader
            })), n.initData()
        }, e.clubSquadList.prototype.initData = function() {
            let t = {
                url: e.common.createApiPath("teams.single.staff", this.requestConfig),
                method: "GET",
                callback: this.renderSquad,
                target: this
            };
            this.startData(t)
        }, e.clubSquadList.prototype.startData = function(e) {
            t.data.manager.add(e)
        }, e.clubSquadList.prototype.refresh = function() {
            this.element.style.display = ""
        }, e.clubSquadList.prototype.renderSquad = function(e) {
            let t = this;
            if (t.thisData = e, e && e.players) {
                let a = "";
                if (e.players.length > 0) {
                    let s = i(e.players);
                    a += l(s, "GOALKEEPER"), a += l(s, "DEFENDER"), a += l(s, "MIDFIELDER"), a += l(s, "FORWARD"), t.squadListContainer && t.squadListContainer.length > 0 && (t.squadListContainer[0].innerHTML = a), t.element.style.display = ""
                } else t.element.style.display = "none"
            } else t.element.style.display = "none"
        }
    }(PULSE.app, PULSE.core, PULSE.app.common, PULSE.ui, PULSE.I18N),
    function(e, t, a, s) {
        e.clubStandings = function(t, a) {
            let n = this;
            n.element = t, n.teamId = a.team || t.getAttribute("data-team"), n.max = t.getAttribute("data-max"), n.urlConfig = {}, n.urlConfig.live = t.getAttribute("data-live"), n.urlConfig.altIds = !0, n.urlConfig.compSeasons = a.season, n.standingsContainer = n.element.getElementsByClassName("standingEntriesContainer"), n.standingsContainer && n.standingsContainer.length > 0 && (n.dataLoader = new s.loader(n.standingsContainer[0], {
                init: !0,
                loaderTemplate: e.templates.loader
            })), n.getStandings()
        }, e.clubStandings.prototype.getStandings = function() {
            let t = {
                url: e.common.createApiPath("standings.all", this.urlConfig),
                method: "GET",
                callback: this.renderTable,
                target: this
            };
            this.startData(t)
        }, e.clubStandings.prototype.startData = function(e) {
            t.data.manager.add(e)
        }, e.clubStandings.prototype.refresh = function() {
            this.element.style.display = ""
        }, e.clubStandings.prototype.renderTable = function(t) {
            let s = this;
            if (s.thisData = t, t && t.tables && t.tables.length > 0 && t.tables) {
                let n = [],
                    i = -1,
                    l = {
                        below: 0,
                        above: n.length
                    };
                if (void 0 !== s.teamId && void 0 !== s.max) {
                    let e = function(e, t) {
                        for (let a = 0; a < e.length; a++)
                            if (1 === e.length || e[a].groupName)
                                for (let s = 0; s < e[a].entries.length; s++)
                                    if (e[a].entries[s].team.id === t) return {
                                        table: a,
                                        team: s
                                    };
                        return {
                            table: -1,
                            team: -1
                        }
                    }(t.tables, s.teamId);
                    e.table > -1 && (n = t.tables[e.table].entries, i = e.team, i > -1 ? (l = function(e, t, a) {
                        let s, n;
                        (a - 1) % 2 != 1 ? (n = (a - 1) / 2, s = (a - 1) / 2) : n = a / 2;
                        let i = t - n;
                        if (i < 0) {
                            let e = 0 - i;
                            i = 0, s += e
                        }
                        let l = t + s;
                        if (l > e.length - 1) {
                            let a = l - (e.length - 1);
                            l = e.length - 1, n += a, i = t - n, i < 0 && (a = 0 - i, i = 0)
                        }
                        return {
                            below: i,
                            above: l
                        }
                    }(n, i, s.max), n = n.slice(l.below, l.above + 1)) : n = n.slice(0, s.max))
                } else void 0 !== s.max && (n = n.slice(0, s.max));
                n.length > 0 ? (n.map((function(e) {
                    if (e.team.id === s.teamId) {
                        let t = e.team.altIds && e.team.altIds.opta ? e.team.altIds.opta + "-bg" : "";
                        e.rowClass = "clubHighlight " + t
                    } else e.rowClass = "";
                    e.movement = "none", e.position < e.startingPosition ? e.movement = "up" : e.startingPosition < e.position && (e.movement = "down"), e.teamName = e.team.club.shortName || e.team.name, e.clubBadge = a.getClubBadge(e.team.altIds.opta, "20"), e.clubBadgeRetina = a.getClubBadge(e.team.altIds.opta, "20", !0), e.url = a.generateContentUrl("club", e.team.club.id, e.team.club.name.replace(new RegExp(" ", "g"), "-"))
                })), s.standingsContainer.length > 0 && (s.standingsContainer[0].innerHTML = Mustache.render(e.templates.clubstandings, {
                    table: n
                }), e.clubBadge(s.standingsContainer[0], !0)), s.element.style.display = "") : s.element.style.display = "none"
            } else s.element.style.display = "none"
        }
    }(PULSE.app, PULSE.core, PULSE.app.common, PULSE.ui),
    function(e, t, a, s) {
        e.clubTabs = function(e, a) {
            let s = this;
            s.activated = [], s.currentSeasons = {}, s.element = e, s.tabData = {}, s.tabs = new t.tab({
                wrap: s.element,
                selector: "[data-ui-tab]",
                activeClass: "active",
                builtClass: "tabbed",
                tabParam: "tableSection",
                tabCallback: function(e) {
                    e.config.tabs.forEach((function(t, a) {
                        e.config.current === t && s.showTabs(e)
                    }))
                }
            })
        }, e.clubTabs.prototype.showTabs = function(e) {
            let t = this,
                a = e.config.current.uiArgs.type;
            t.type = a, t.teamId = e.config.current.uiArgs.teamId, t.currentSeasons[a] ? (t.compSeason = t.currentSeasons[a], t.resetTabs()) : t.findCurrentSeason(a)
        }, e.clubTabs.prototype.resetTabs = function() {
            let t = this;
            t.tabData[t.teamId] || (t.tabData[t.teamId] = {
                matches: [],
                standings: [],
                squad: []
            }), t.element.classList.remove("no-team");
            let a = document.querySelectorAll('[data-widget="club-standings"]');
            Array.prototype.map.call(a, (function(a, s) {
                t.tabData[t.teamId].standings[s] ? t.tabData[t.teamId].standings[s].refresh() : t.tabData[t.teamId].standings.push(new e.clubStandings(a, {
                    season: t.compSeason,
                    team: t.teamId
                }))
            }));
            let s = document.querySelectorAll('[data-widget="club-matches"]');
            Array.prototype.map.call(s, (function(a, s) {
                t.tabData[t.teamId].matches[s] ? t.tabData[t.teamId].matches[s].refresh() : t.tabData[t.teamId].matches.push(new e.clubMatches(a, {
                    team: t.teamId,
                    comp: e.competition[t.type]
                }))
            }));
            let n = document.querySelectorAll('[data-widget="club-squad-list"]');
            Array.prototype.map.call(n, (function(a, s) {
                t.tabData[t.teamId].squad[s] ? t.tabData[t.teamId].squad[s].refresh() : t.tabData[t.teamId].squad.push(new e.clubSquadList(a, {
                    season: t.compSeason,
                    team: t.teamId
                }))
            }))
        }, e.clubTabs.prototype.findCurrentSeason = function(t) {
            let s, n = this,
                i = !1,
                l = parseInt(n.teamId, 10);
            for (let t in e.competitionTeams)
                if (e.competitionTeams[t].indexOf(l) > -1) {
                    i = !0;
                    break
                }
            if (!i) return void n.hideContentTabs();
            n.element.classList.remove("no-team");
            let o = e.competition[t];
            if (o instanceof Array) {
                for (let t in e.competitionTeams)
                    if (e.competitionTeams[t].indexOf(l) > -1) {
                        s = t;
                        break
                    }
            } else s = o;
            let r = {
                url: e.common.createApiPath("competition.current", {
                    id: s
                }),
                method: "GET",
                callback: n.getSeason,
                target: this,
                forceCallback: !0,
                compType: t
            };
            a.data.manager.add(r)
        }, e.clubTabs.prototype.getSeason = function(e, t) {
            let a = this;
            e && e.id && t && t.compType ? (a.compSeason = e.id, a.currentSeasons[t.compType] = a.compSeason, a.resetTabs()) : a.hideContentTabs()
        }, e.clubTabs.prototype.hideContentTabs = function() {
            const e = this;
            if (e.element.classList.add("no-team"), e.tabData[e.teamId] ? .standings && e.tabData[e.teamId].matches.length) e.tabData[e.teamId].standings[0].hide();
            else {
                let e = document.querySelectorAll('[data-widget="club-standings"]');
                e && e.forEach((e => {
                    e.style.display = "none"
                }))
            }
            if (e.tabData[e.teamId] ? .matches && e.tabData[e.teamId].matches.length) e.tabData[e.teamId].matches[0].hide();
            else {
                let e = document.querySelectorAll('[data-widget="club-matches"]');
                e && e.forEach((e => {
                    e.style.display = "none"
                }))
            }
            if (e.tabData[e.teamId] ? .squad && e.tabData[e.teamId].squad.length) e.tabData[e.teamId].squad[0].hide();
            else {
                let e = document.querySelectorAll('[data-widget="club-squad-list"]');
                e && e.forEach((e => {
                    e.style.display = "none"
                }))
            }
        };
        let n = document.querySelectorAll('[data-widget="club-tabs"]');
        for (let t = 0; t < n.length; t++) new e.clubTabs(n[t], {})
    }(PULSE.app, PULSE.ui, PULSE.core, PULSE.app.common);