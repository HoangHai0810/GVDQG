"use strict";
PULSE.app.templates.predictedSearchitem = '<button class="searchBar__predicted-search-button btn js-predicted-search-button" data-title="{{ name }}" data-player-id="{{ playerId }}"> {{{ renderString }}} </button> ',
    function(e) {
        e.clubNavigation = function(e, t) {
            this.element = e, this.setListeners()
        }, e.clubNavigation.prototype.setListeners = function() {
            var e = this;
            this.element.querySelector(".clubNavigation .clubSitesHeading").addEventListener("click", (function(t) {
                e.element.classList.toggle("open")
            }))
        };
        for (var t = document.querySelectorAll('.clubNavigation[data-script="pl_global-header"]'), a = 0; a < t.length; a++) new e.clubNavigation(t[a], {})
    }(PULSE.app),
    function(e, t, a) {
        function r() {
            let e = [];
            for (let t = 1; t <= 20; t++) {
                let a = t / 20;
                e.push(a)
            }
            return e.push(0), e
        }
        e.mainNavigation = function(e, t) {
            let a = this;
            a.element = e, a.mainMoreLinksButton = a.element.querySelector(".moreLinks"), a.mobileMenuExpander = a.element.querySelector("#hamburgerToggle"), a.mainSearchButton = a.element.querySelector(".headerSearchButton"), a.searchBarContainer = a.element.querySelector(".searchBarContainer"), a.searchInputContainer = a.element.querySelector(".searchInputContainer"), a.searchInputBtn = a.element.querySelector(".searchInputBtn"), a.searchOverlay = a.element.querySelector(".searchOverlay"), document.activeElement, a.mainLogoElement = document.querySelector(".logoContainer"), a.pageLinks = a.element.querySelector(".pageLinks"), a.dropDownLinks = a.element.querySelectorAll(".pageLinks > li:not(.noDrop)"), a.mobileNav = a.pageLinks.querySelectorAll('[role="button"].navLink'), a.navElement = a.element.querySelector(".navBar"), a.pageLinks = a.element.querySelector(".headerSearchButton"), a.subNav = document.querySelector(".subNav .moreList"), a.subNavMore = document.querySelector(".subNav .moreListBtn"), a.subNavContainer = document.querySelector(".subNav"), a.globalNav = document.querySelector(".masthead .fixedContainer"), a.masthead = document.querySelector(".masthead"), a.clubsList = document.querySelector("nav.clubNavigation"), a.navbarOffsetTop = a.navElement.offsetHeight, a.bottom = a.navElement.offsetTop, a.pageOffsetTop = window.pageYOffset;
            let r = {
                navWrap: a.subNavContainer,
                moreLabel: "More"
            };
            a.subNavContainer && (a.moreNav = new PULSE.ui.moreNav(r)), a.setListeners(), a.setHeaderObserver()
        }, e.mainNavigation.prototype.toggleSearch = function() {
            let t = this;
            if (a.style.toggleClass(t.mainSearchButton, "active"), a.style.toggleClass(t.searchBarContainer, "open"), a.style.toggleClass(t.masthead, "searchOpen"), document.querySelector("body").classList.toggle("u-body-no-scroll"), a.style.hasClass(t.searchBarContainer, "open") && t.searchInputContainer.focus(), !t.searchHeaderRedirect) {
                const a = document.querySelector('[data-widget="search-header-redirect"]');
                a && (t.searchHeaderRedirect = new e.SearchHeaderRedirect(a))
            }
        }, e.mainNavigation.prototype.setListeners = function() {
            let t = this;
            t.searchOverlay && t.searchOverlay.addEventListener("click", (function() {
                t.toggleSearch()
            })), t.searchInputBtn && t.searchInputBtn.addEventListener("blur", (function(e) {
                setTimeout((function() {
                    document.activeElement != t.searchInputContainer && t.toggleSearch()
                }), 100)
            })), a.event.listenForMultiple(t.mobileMenuExpander, ["keypress", "click"], (function() {
                document.querySelector("body").classList.toggle("mastheadOpen"), "true" === t.mobileMenuExpander.getAttribute("aria-expanded") ? t.mobileMenuExpander.setAttribute("aria-expanded", "false") : t.mobileMenuExpander.setAttribute("aria-expanded", "true"), null !== document.querySelector("body .pl-modal.open") && e.modalsController.closeAll()
            })), a.event.listenForMultiple(t.subNavMore, ["keypress", "click"], (function() {
                t.subNav.classList.toggle("open")
            }));
            for (let e = 0; e < t.dropDownLinks.length; e++) t.dropDownLinks[e].addEventListener("keypress", (function(e) {
                13 === e.which && (e.preventDefault(), a.style.toggleClass(this, "open"))
            })), t.dropDownLinks[e].addEventListener("blur", (function(e) {
                e.relatedTarget && null !== e.relatedTarget.closest(".dropdown") || a.style.removeClass(this, "open")
            }), !0);
            t.mainSearchButton && a.event.listenForMultiple(t.mainSearchButton, ["keypress", "click"], (function() {
                t.toggleSearch(!0)
            }));
            for (let e = 0; e < t.mobileNav.length; e++) a.event.listenForMultiple(t.mobileNav[e], ["keypress", "click"], (function(e) {
                let a = e.currentTarget.getAttribute("data-nochildrenlink");
                if (a) window.location.href = a;
                else {
                    for (let e = 0; e < t.mobileNav.length; e++) t.mobileNav[e].classList.remove("active");
                    e.currentTarget.classList.add("active"), e.currentTarget.classList.contains("clubListMobileButton") ? t.clubsList.classList.add("open") : t.clubsList.classList.remove("open")
                }
            }))
        }, e.mainNavigation.prototype.setHeaderObserver = function() {
            let e = document.querySelector(".clubNavigation"),
                t = {
                    root: null,
                    rootMargin: "0px",
                    threshold: r()
                };
            new IntersectionObserver(this.fixNavigation.bind(this), t).observe(e)
        }, e.mainNavigation.prototype.fixNavigation = function(e) {
            let t = this,
                r = e[0],
                n = Math.abs(r.boundingClientRect.top),
                i = t.masthead.getBoundingClientRect().height - n;
            t.mainLogoElement.style.height = i + "px", 0 === r.intersectionRatio ? a.style.addClass(t.globalNav, "fixed") : r.intersectionRatio > 0 && a.style.removeClass(t.globalNav, "fixed")
        };
        let n = document.querySelectorAll('.navContainer[data-script="pl_global-header"]');
        Array.prototype.map.call(n, (function(t) {
            t = new e.mainNavigation(t, {})
        }))
    }(PULSE.app, PULSE.app.common, PULSE.core),
    function(e, t, a) {
        const r = function(e, t, a, r) {
            let n = a || [],
                i = 0;
            if (t && t.data && t.data.length > 0)
                for (let a = 0; a < t.data.length; a++) {
                    let s = t.data[a],
                        c = "";
                    if (s.name && (s.name.display || s.name.first || s.name.last) ? c = s.name.display ? s.name.display : s.name.first + " " + s.name.last : s.name && (c = s.name), s.shortName && (c += " " + s.shortName), c.toLowerCase().indexOf(e.toLowerCase()) > -1 && (s.type = t.type, n.push(s), i++, r && r <= i)) return n
                }
            return n
        };
        e.SearchHeaderRedirect = function(e) {
            let t = this;
            t.element = e, t.url = "/search", t.searchInputWrapper = t.element.querySelector(".js-search-input-container"), t.searchInputContainer = t.element.querySelector(".searchInputContainer"), t.searchButtonContainer = t.element.querySelector(".searchButtonContainer"), t.emptyInputBtn = t.element.querySelector(".js-empty-input-btn"), t.predictedSearchContainer = t.element.querySelector(".js-predicted-search-wrapper"), t.predictedSearchContainerLoader = t.element.querySelector(".js-loader"), t.suggestedItems = t.element.querySelectorAll(".js-suggested-item"), t.predictedItemIndex = -1, t.term = "", t.getManagersCache(), t.getClubCache(), t.setListeners()
        }, e.SearchHeaderRedirect.prototype.setListeners = function() {
            let e = this;
            e.searchInputContainer.addEventListener("focusout", (function(a) {
                e.predictedSearchContainer.parentElement.classList.remove("is-active"), e.predictedItemIndex = -1, e.predictedSearchTerm = null, t.style.removeClass(e.searchInputWrapper, "is-active"), e.predictedSearchContainer.querySelector(".is-active") && e.predictedSearchContainer.querySelector(".is-active").classList.remove("is-active")
            })), e.searchInputContainer.addEventListener("focusin", (function() {
                t.style.addClass(e.searchInputWrapper, "is-active"), e.predictedSearchContainer.parentElement.classList.add("is-active")
            })), e.searchInputContainer.addEventListener("keydown", (function(t) {
                let a = t.keyCode || t.which;
                38 !== a && 40 !== a ? 39 !== a && 37 !== a && (13 === a ? (e.predictedSearchTerm && (e.searchInputContainer.value = e.predictedSearchTerm), e.searchInputContainer.value.length > 0 && e.searchTerm()) : (e.predictedSearchContainer.parentElement.classList.remove("is-active"), e.predictedSearchContainer.querySelector(".is-active") && (e.predictedItemIndex = -1, e.predictedSearchTerm = null, e.predictedSearchContainer.querySelector(".is-active").classList.remove("is-active")))) : e.navigateDropdown(40 === a)
            })), e.searchInputContainer.addEventListener("keyup", a.debounce(e.keypressFunction.bind(this), 300)), e.searchButtonContainer.addEventListener("click", (function() {
                e.searchInputContainer.value.length > 0 && e.searchTerm()
            })), e.searchInputContainer.addEventListener("keyup", (() => {
                e.searchInputContainer.value.length > 0 ? e.searchInputWrapper.classList.add("has-value") : e.searchInputWrapper.classList.remove("has-value")
            })), e.emptyInputBtn.addEventListener("click", (() => {
                e.searchInputContainer.value = "", e.searchInputWrapper.classList.remove("has-value"), e.predictedSearchContainer.innerHTML = "", t.style.removeClass(e.searchButtonContainer, "active"), t.style.removeClass(e.searchInputWrapper, "is-active"), e.predictedSearchContainer.parentElement.classList.remove("is-active")
            })), e.suggestedItems.forEach((t => {
                t.addEventListener("click", (function(a) {
                    a.preventDefault(), e.clickedItems(t)
                }))
            }))
        }, e.SearchHeaderRedirect.prototype.keypressFunction = function(e) {
            const a = this;
            let r = e.keyCode || e.which;
            38 !== r && 40 !== r && (a.searchInputContainer.value.length > 0 ? (t.style.addClass(a.searchButtonContainer, "active"), t.style.addClass(a.searchInputWrapper, "is-active")) : (t.style.removeClass(a.searchButtonContainer, "active"), t.style.removeClass(a.searchInputWrapper, "is-active"), a.predictedSearchContainer.parentElement.classList.remove("is-active")), a.searchInputContainer.value.length > 2 && a.getPredictedSearch())
        }, e.SearchHeaderRedirect.prototype.searchTerm = function() {
            let e = this;
            if (t.style.hasClass(e.searchButtonContainer, "active")) {
                let t = e.url,
                    a = e.searchInputContainer.value;
                a && "" !== a && (t += "?term=" + a), window.location.href = t
            }
        }, e.SearchHeaderRedirect.prototype.getPredictedSearch = function() {
            const t = this,
                a = t.searchInputContainer.value;
            t.predictedSearchContainer.innerHTML = "", t.predictedSearchContainer.parentElement.classList.add("is-active"), t.predictedSearchContainerLoader.classList.remove("u-hide");
            fetch(e.common.createSearchPath([a, a + "*"], ["players"], {
                size: 6,
                start: 0,
                fullObjectResponse: !0
            })).then((e => e.json())).then((e => {
                if (e && e.hits && e.hits.hit && e.hits.hit.length || t.clubs || t.managers) {
                    let i = [];
                    e && e.hits && e.hits.hit && e.hits.hit.length && (i = e.hits.hit.filter((e => "FOOTBALL_PERSON" === e.contentType)));
                    const s = r(a, t.clubs),
                        c = r(a, t.managers),
                        o = [...s, ...(n = i, n.sort((function(e, t) {
                            return t.appearances = t.appearances ? t.appearances : 0, e.appearances = e.appearances ? e.appearances : 0, t.response.appearances - e.response.appearances
                        })).slice(0, 3)), ...c];
                    t.renderResults(o)
                }
                var n
            }))
        }, e.SearchHeaderRedirect.prototype.renderResults = function(t) {
            const a = this,
                r = a.searchInputContainer.value;
            let n = "";
            t.forEach((t => {
                let a = "",
                    i = "";
                "manager" === t.type ? a = t.name.display || "" : "FOOTBALL_PERSON" === t.contentType ? (a = t.response.name.display || "", i = t.response.id) : "team" === t.type && (a = t.name || "");
                let s = function(e, t) {
                    const a = e.toLowerCase(),
                        r = t.toLowerCase(),
                        n = new RegExp(r, "g");
                    return a.replace(n, "<span>" + r + "</span>")
                }(a, r);
                n += Mustache.render(e.templates.predictedSearchitem, {
                    name: a,
                    renderString: s,
                    playerId: i
                })
            })), a.predictedSearchContainer.innerHTML = n, a.predictedSearchContainerLoader.classList.add("u-hide"), setTimeout((() => {
                a.setPredictedItemListeners()
            }), 200)
        }, e.SearchHeaderRedirect.prototype.setPredictedItemListeners = function() {
            const e = this;
            e.predictedSearchContainer.querySelectorAll(".js-predicted-search-button").forEach((t => {
                t.addEventListener("click", (function(a) {
                    a.preventDefault(), e.clickedItems(t)
                }))
            }))
        }, e.SearchHeaderRedirect.prototype.clickedItems = function(e) {
            let t = this.url,
                a = e.dataset.title,
                r = e.dataset.playerId,
                n = e.dataset.type;
            this.searchInputContainer.value = a, a && "" !== a && (t += "?term=" + a), r && "" !== r && (t += "&playerId=" + r), n && "" !== n && (t += "&isHotTopic=true"), window.location.href = t
        }, e.SearchHeaderRedirect.prototype.navigateDropdown = function(e) {
            const t = this,
                a = t.predictedSearchContainer.querySelectorAll(".js-predicted-search-button"),
                r = t.predictedSearchContainer.querySelector(".js-predicted-search-button.is-active"),
                n = a.length - 1;
            a && a.length && (r && r.classList.remove("is-active"), e && t.predictedItemIndex !== n ? t.predictedItemIndex = t.predictedItemIndex + 1 : e || -1 === t.predictedItemIndex || (t.predictedItemIndex = t.predictedItemIndex - 1, -1 === t.predictedItemIndex && (t.predictedSearchTerm = null)), a[t.predictedItemIndex] && (t.predictedSearchTerm = a[t.predictedItemIndex].dataset.title, a[t.predictedItemIndex].classList.add("is-active")))
        }, e.SearchHeaderRedirect.prototype.getManagersCache = function() {
            let a = {
                    pageSize: 500,
                    type: "manager",
                    comps: e.competition.FIRST,
                    compCodeForActivePlayer: e.defaultCompCode,
                    altIds: !0
                },
                r = {
                    url: e.common.createApiPath("team-officials.all", a),
                    method: "GET",
                    callback: this.storeManagers,
                    target: this
                };
            t.data.manager.add(r)
        }, e.SearchHeaderRedirect.prototype.storeManagers = function(e) {
            let t = this;
            e && e.content && (t.managers = {
                data: e.content,
                type: "manager"
            })
        }, e.SearchHeaderRedirect.prototype.getClubCache = function() {
            let a = {
                    pageSize: 100,
                    comps: e.competition.FIRST,
                    altIds: !0
                },
                r = {
                    url: e.common.createApiPath("teams.all", a),
                    method: "GET",
                    callback: this.storeClubs,
                    target: this
                };
            t.data.manager.add(r)
        }, e.SearchHeaderRedirect.prototype.storeClubs = function(e) {
            let t = this;
            e && e.content && (t.clubs = {
                data: e.content,
                type: "team"
            })
        }
    }(PULSE.app, PULSE.core, PULSE.app.common);