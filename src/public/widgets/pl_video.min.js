"use strict";
PULSE.app.templates.auto_playlist_item = '<li class="auto-playlist__item" data-video-id="{{ item.id }}" data-video-category="Video: {{ item.category }}" data-media-id="{{ item.mediaId }}" data-video-title="{{ item.title }}" data-video-description="{{ item.description }}" data-video-duration="{{ item.duration }}"> <a class="u-link-reset" href=""> <article class="inline-video-thumb"> <div class="col-4 col-4-m col-4-s inline-video-thumb__image-container"> <picture> <source media="(max-width: 640px)" srcset="{{ item.thumbnail.imageMobileUrl }}"> <source media="(max-width: 1024px)" srcset="{{ item.thumbnail.imageTabletUrl }}"> <source media="(min-width: 1024px)" srcset="{{ item.thumbnail.imageUrlDesktop }}, {{ item.thumbnail.imageUrl2x }} 2x"> <img class="inline-video-thumb__image" src="{{ item.thumbnail.imageUrl }}" alt=""> </picture> <time class="inline-video-thumb__play-time {{#item.fantasy }} inline-video-thumb__play-time--alt {{/item.fantasy }}"> {{#item.fantasy }} <i class="icn video-page-play-alt"></i> {{/item.fantasy }} {{^item.fantasy }} <i class="icn video-page-play"></i> {{/item.fantasy }} <span class="inline-video-thumb__play-time-label">{{ item.durationFormatted }}</span> </time> <span class="inline-video-thumb__now-playing">Now Playing</span> </div> <div class="col-8 col-8-m col-8-s inline-video-thumb__text-container"> <h1 class="inline-video-thumb__title">{{ item.title }}</h1> {{#item.closedCaption }} <svg class="inline-video-thumb__desc-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="11" viewBox="0 0 88 62"> <path d="M88 30.54c-.135 14.353-.674 20.61-4.04 25.031-.606 1.021-1.751 1.497-2.693 2.177-3.299 2.517-18.853 3.333-36.897 3.47-18.044-.137-34.338-.953-37.57-3.47-1.01-.68-2.155-1.156-2.828-2.177C.672 51.151.202 44.893 0 30.54.202 16.188.673 9.93 3.972 5.509 4.645 4.557 5.79 4.013 6.8 3.333 10.032.884 26.326 0 44.37 0s33.598.884 36.897 3.333c.942.68 2.087 1.224 2.693 2.176C87.326 9.93 87.865 16.189 88 30.54zM32.24 44.462c4.368 0 7.98-1.554 10.71-4.494l-3.906-3.864c-1.89 2.058-4.2 2.898-6.846 2.898-5.418 0-9.366-3.78-9.366-9.492 0-5.712 3.948-9.492 9.366-9.492 2.604 0 4.956.882 6.804 2.94l3.948-3.906c-2.73-2.94-6.342-4.494-10.71-4.494-8.82 0-15.078 6.216-15.078 14.952S23.42 44.462 32.24 44.462zm28.812 0c4.368 0 7.98-1.554 10.71-4.494l-3.906-3.864c-1.89 2.058-4.2 2.898-6.846 2.898-5.418 0-9.366-3.78-9.366-9.492 0-5.712 3.948-9.492 9.366-9.492 2.604 0 4.956.882 6.804 2.94l3.948-3.906c-2.73-2.94-6.342-4.494-10.71-4.494-8.82 0-15.078 6.216-15.078 14.952s6.258 14.952 15.078 14.952z"/> </svg> {{/item.closedCaption}} {{#item.audioDescription }} <svg class="inline-video-thumb__desc-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="11" viewBox="0 0 88 62"> <path d="M88 30.54c-.135 14.353-.674 20.61-4.04 25.031-.606 1.021-1.751 1.497-2.693 2.177-3.299 2.517-18.853 3.333-36.897 3.47-18.044-.137-34.338-.953-37.57-3.47-1.01-.68-2.155-1.156-2.828-2.177C.672 51.151.202 44.893 0 30.54.202 16.188.673 9.93 3.972 5.509 4.645 4.557 5.79 4.013 6.8 3.333 10.032.884 26.326 0 44.37 0s33.598.884 36.897 3.333c.942.68 2.087 1.224 2.693 2.176C87.326 9.93 87.865 16.189 88 30.54zM37.217 44h6.132L32.051 15.02h-7.098L13.697 44h6.132l2.73-7.266h11.928L37.217 44zM24.491 31.526l4.032-10.668 4.032 10.668h-8.064zm32.97-16.506H47.297V44h10.164c9.828 0 15.288-6.048 15.288-14.49s-5.46-14.49-15.288-14.49zm0 23.604h-4.494V20.396h4.494c6.384 0 9.618 3.78 9.618 9.114 0 5.334-3.234 9.114-9.618 9.114z"/> </svg> {{/item.audioDescription}} </div> <span class="inline-video-thumb__next-label">Coming up next</span> </article> </a> </li> ', PULSE.app.templates.loggedinpersonalisedtitle = '<span class="badge badge-image-container" data-widget="club-badge-image" data-size="100"> <img class="badge-image badge-image--100 js-badge-image" src="{{ clubBadge }}" srcset="{{ clubBadge }}, {{ clubBadgeRetina }} 2x"> </span> ', PULSE.app.templates.loggedinpersonalisedvideosheader = '<div class="personalised-video__content t{{ optaId }}-bg"> <h2 class="personalised-video__title">{{ title }}</h2> <p class="personalised-video__description">{{ description }}</p> <a href="{{ linkUrl }}" class="personalised-video__link js-default-link">{{ linkText }}<span class="icn arrow-rightwhite"></span></a> </div> <div class="personalised-video__club-badge u-hide-tab"> <span class="badge badge-image-container" data-widget="club-badge-image" data-size="70"> <img class="badge-image badge-image--70 js-badge-image" src="{{ clubBadge }}" srcset="{{ clubBadge }}, {{ clubBadgeRetina }} 2x"> </span> </div> <div class="personalised-video__image-wrapper" style="background-image: url({{ imageUrl }}); background-size: cover; background-repeat: no-repeat; background-position: center;"> <div class="personalised-video__club-badge u-show-tab"> <span class="badge badge-image-container" data-widget="club-badge-image" data-size="50"> <img class="badge-image badge-image--50 js-badge-image" src="{{ clubBadgeSmall }}" srcset="{{ clubBadgeSmall }}, {{ clubBadgeSmallRetina }} 2x"> </span> </div> </div> ', PULSE.app.templates.novideosmessage = "<li> <h4>{{ text }}</h4> </li> ", PULSE.app.templates.personalisedvideo = '<li class="personalised-video__video-item" data-ui-modal="#videoPlayer" data-ui-args="{{ uiArgs }}"> <a href="{{ videoPath }}/{{ id }}?FOOTBALL_CLUBS={{ clubId }}" class="thumbnail {{ fantasy }} videoThumb placeholder js-content-load" data-initialised="false"> <figure> <span class="image thumbCrop-video-small"> <svg class="videoThumb__play-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 35 40"> <path d="M0 3.29C0 .743 2.805-.835 5.017.468l28.361 16.71c2.163 1.273 2.163 4.373 0 5.645L5.018 39.533C2.804 40.836 0 39.257 0 36.709V3.291z"/> </svg> <img class="videoThumb__img" src="{{leadMediaUrls}}" data-src="" data-src-placeholder="${thumbPlaceholderUrl}" alt=""> <span class="runTime"> <span class="icn play-w"></span> <time datetime="PT2M59S">{{durationFormatted}}</time> </span> </span> <figcaption> <span class="title">{{ title }}</span> <time class="published">{{ dateFormatted }}</time> {{#closedCaptionTitle}} <span class="closedCaption">{{ closedCaptionTitle }}</span> {{/closedCaptionTitle}} {{#audioDescTitle}} <span class="audioDesc">{{ audioDescTitle }}</span> {{/audioDescTitle}} </figcaption> </figure> </a> </li> ',
    function(e, t, a, i) {
        e.PersonalisedTitle = function(t) {
            const i = this;
            i.container = t, i.clubNameHeading = i.container.querySelector(".js-personalised-title-team"), i.clubBadgeImg = i.container.querySelector(".js-personalised-title-badge"), (!e.loggedInUserData || e.loggedInUserData && !e.loggedInUserData.loggedin) && (e.loggedInUserData = JSON.parse(a.localStorage.getStorage("userData")));
            let o = e.loggedInUserData;
            o.loggedin && o.club && o.club.opta && (i.club = {
                optaId: o.club.opta,
                id: o.club.id,
                clubName: o.club.name,
                abbr: o.club.abbr
            }, i.setClubInfo())
        }, e.PersonalisedTitle.prototype.setClubInfo = function() {
            const i = this,
                o = `t${i.club.optaId}`;
            let n = {
                clubBadge: t.getClubBadge(o, "100"),
                clubBadgeRetina: t.getClubBadge(o, "100", !0),
                defaultBadge: `this.src = '${t.getDefaultBadge("100")}'`
            };
            i.clubNameHeading.innerHTML = i.club.clubName, i.clubBadgeImg.innerHTML = Mustache.render(e.templates.loggedinpersonalisedtitle, n), a.style.removeClass(i.clubBadgeImg, "u-hide"), e.clubBadge(i.clubBadgeImg, !0)
        };
        let o = document.querySelector('[data-widget="personalised-title"]');
        o && setTimeout((function() {
            e.PersonalisedTitle = new e.PersonalisedTitle(o)
        }), 1e3)
    }(PULSE.app, PULSE.app.common, PULSE.core, PULSE.I18N),
    function(e, t, a, i, o) {
        const n = {
                thumbnail: "Media Thumbnail - Small",
                thumbnailRetina: "Media Thumbnail - Large",
                thumbnailMobile: "Media Thumbnail - Small",
                thumbnailMobileRetina: "Media Thumbnail - Small"
            },
            l = "u-hide";
        e.personalisedFilteredVideos = function(a) {
            let i = this;
            i.container = a, i.requestConfig = {}, i.requestConfig.tagNames = "", i.requestConfig.compSeasonId = "", i.videoPath = i.container.dataset.videoPath, i.videoWrapper = i.container.querySelector(".js-video-wrapper"), i.buttonWrapper = i.container.querySelector(".js-button-wrapper"), i.loadMoreButton = i.container.querySelector(".js-load-more"), i.loaderElement = i.container.querySelector(".js-loader-element"), i.page = 0, i.filterControllerElement = i.container.querySelector("section.pageFilter"), i.filterControllerElement && (i.compSeasonsInit = !1, i.filterController = new e.common.listFilterController(i.filterControllerElement, {
                dropdowns: e.filterGroups[i.filterControllerElement.getAttribute("data-filter-config")],
                delegate: i
            })), e.loggedInUserData.loggedin || (e.loggedInUserData = JSON.parse(t.localStorage.getStorage("userData"))), i.userData = e.loggedInUserData, i.userData && i.userData.club && (i.requestConfig.teamId = i.userData.club.id, i.setListeners())
        }, e.personalisedFilteredVideos.prototype.setListeners = function() {
            const t = this;
            t.loadMoreButton.addEventListener("click", (function() {
                t.page = t.page + 1, t.initData(), t.scrollLoader ? t.scrollLoader.newLoader() : t.scrollLoader = new e.common.scrollLoader(t.container, t, !0)
            }))
        }, e.personalisedFilteredVideos.prototype.filterCleared = function(e) {
            this.filterUpdated(e)
        }, e.personalisedFilteredVideos.prototype.filterUpdated = function(t, a) {
            const i = this;
            let o = i.requestConfig.compSeasonId;
            i.page = 0, i.scrollLoader && i.scrollLoader.removeLoader(), t.map((function(t) {
                let o = a && -1 !== t.autoId && void 0 !== t.autoId ? t.autoId : t.state.id;
                switch (t.name) {
                    case "compSeasons":
                        i.requestConfig.compSeasonId = o, "0" === t.state.index ? i.requestConfig.date = moment(new Date).locale(e.language).format("YYYY-MM-DD") : i.requestConfig.date = void 0;
                        break;
                    case "tagNames":
                        i.requestConfig.tagNames = o
                }
            })), a && o === i.requestConfig.compSeasonId || i.initData()
        }, e.personalisedFilteredVideos.prototype.initData = function() {
            let a = this,
                i = -1 === a.requestConfig.compSeasonId ? `"FOOTBALL_CLUB:${a.requestConfig.teamId}"` : `"FOOTBALL_CLUB:${a.requestConfig.teamId}"and"FOOTBALL_COMPSEASON:${a.requestConfig.compSeasonId}"`;
            const o = {
                page: a.page,
                pageSize: 12,
                referenceExpression: i,
                order: "timestamp desc",
                date: a.requestConfig.date
            }; - 1 !== a.requestConfig.tagNames && (o.tagNames = a.requestConfig.tagNames);
            const n = {
                url: e.common.createContentPath("video", o),
                method: "GET",
                callback: a.renderClubVideos,
                forceCallback: !0,
                target: this
            };
            t.data.request(n.url, n.method, n.callback, n.target)
        }, e.personalisedFilteredVideos.prototype.renderClubVideos = function(a) {
            const i = this;
            if (!a || !a.content.length) return void(i.videoWrapper.innerHTML = Mustache.render(e.templates.novideosmessage, {
                text: o.lookup("label.yourclub.novideos")
            }));
            const n = a.content;
            i.scrollLoader && (i.scrollLoader.contentLoaded(), i.page === a.pageInfo.numPages - 1 && i.scrollLoader.removeLoader()), 0 === i.page && (i.videoWrapper.innerHTML = ""), a.pageInfo.page > 0 || 1 === a.pageInfo.numPages ? t.style.hasClass(i.buttonWrapper, l) || t.style.addClass(i.buttonWrapper, l) : t.style.hasClass(i.buttonWrapper, l) && t.style.removeClass(i.buttonWrapper, l);
            for (let t = 0; t < n.length; t++) {
                let a = i.setData(n[t]);
                a.clubId = i.userData.club.id, i.videoWrapper.innerHTML = i.videoWrapper.innerHTML + Mustache.render(e.templates.personalisedvideo, a)
            }
            i.dataLoader && i.dataLoader.removeLoader()
        }, e.personalisedFilteredVideos.prototype.didRequestLoad = function() {
            let e = this;
            e.page = e.page + 1, e.initData()
        }, e.personalisedFilteredVideos.prototype.setData = function(e) {
            let t, i = a.getContentModel(e, n);
            return t = e.thumbnail && e.thumbnail.onDemandUrl ? `${e.thumbnail.onDemandUrl}?width=350px` : `${e.imageUrl}`, null !== i.tags && i.tags.map((function(e) {
                "fantasy" === e.label.toLowerCase() && (i.fantasy = "thumbnail--fantasy")
            })), {
                id: e.id,
                audioDescTitle: i.avString,
                fantasy: i.fantasy,
                closedCaptionTitle: i.ccString,
                videoPath: this.videoPath,
                type: e.type,
                mediaId: e.mediaId,
                uiArgs: e.uiArgs,
                title: e.title,
                description: e.description,
                subtitle: e.subtitle,
                duration: e.duration,
                durationFormatted: a.durationToTime(e.duration),
                link: i.link,
                dateFormatted: i.dateFormatted,
                leadMediaUrls: t || i.leadMediaUrls,
                publishFrom: e.pusblishFrom,
                isPortrait: i.isPortrait
            }
        };
        e.filterGroups.setData((function() {
            let t = document.querySelectorAll('[data-widget="personalised-video-filtered-list"]');
            for (let a = 0; a < t.length; a++) new e.personalisedFilteredVideos(t[a])
        }))
    }(PULSE.app, PULSE.core, PULSE.app.common, PULSE.ui, PULSE.I18N),
    function(e, t, a, i) {
        const o = "u-hide",
            n = "is-transitioning",
            l = "loggedinpersonalisedvideosheader",
            r = {
                thumbnail: "Media Thumbnail - Small",
                thumbnailRetina: "Media Thumbnail - Large",
                thumbnailMobile: "Media Thumbnail - Small",
                thumbnailMobileRetina: "Media Thumbnail - Small"
            };
        e.PersonalisedVideo = function(t) {
            const i = this;
            i.container = t, i.contentWrapper = i.container.querySelector(".js-content-wrapper"), i.header = i.container.querySelector(".js-header"), i.headerName = i.container.querySelector(".js-header-name"), i.headerTeam = i.container.querySelector(".js-header-team"), i.headerLinkResponsive = i.container.querySelector(".js-header-link-responsive"), i.videoContainer = i.container.querySelector(".js-video-container"), i.videoWrapper = i.container.querySelector(".js-video-wrapper"), i.videoPath = i.container.dataset.videoPath, e.loggedInUserData || (e.loggedInUserData = JSON.parse(a.localStorage.getStorage("userData")));
            let o = e.loggedInUserData;
            o.loggedin && o.club && o.club.opta ? (i.club = {
                optaId: o.club.opta,
                id: o.club.id,
                clubName: o.club.name,
                abbr: o.club.abbr
            }, i.user = {
                firstName: o.plProfile.u.fn
            }, i.getClubPromo(), i.videoContainer && i.getClubVideos()) : i.renderDefaultLink()
        }, e.PersonalisedVideo.prototype.getClubPromo = function() {
            const t = {
                    page: 0,
                    pageSize: 1,
                    references: "FOOTBALL_CLUB:" + this.club.id,
                    tagNames: "Video - Club Promo"
                },
                i = {
                    url: e.common.createContentPath("promo", t),
                    method: "GET",
                    callback: this.renderClubPromo,
                    forceCallback: !0,
                    target: this
                };
            a.data.request(i.url, i.method, i.callback, i.target)
        }, e.PersonalisedVideo.prototype.renderClubPromo = function(i) {
            const r = this,
                s = i.content[0];
            let d = {
                title: s.title,
                description: s.description,
                clubBadge: t.getClubBadge(`t${r.club.optaId}`, "70"),
                clubBadgeRetina: t.getClubBadge(`t${r.club.optaId}`, "70", !0),
                clubBadgeSmall: t.getClubBadge(`t${r.club.optaId}`, "50"),
                clubBadgeSmallRetina: t.getClubBadge(`t${r.club.optaId}`, "50", !0),
                optaId: r.club.optaId
            };
            if (s.links.length && (d.linkUrl = s.links[0].promoUrl, d.linkText = s.links[0].linkText), s.promoItem)
                if (s.promoItem.onDemandUrl) d.imageUrl = s.promoItem.onDemandUrl + "?width=668&height=240";
                else {
                    const e = s.promoItem.variants.filter((function(e) {
                        return "Fantasy widget" === e.tag.label
                    }));
                    e.length && (d.imageUrl = e[0].url)
                }
            r.header ? (a.style.addClass(r.container, n), setTimeout((function() {
                a.style.removeClass(r.header, o), a.style.removeClass(r.headerLinkResponsive, o), a.style.removeClass(r.videoContainer, o), r.contentWrapper.innerHTML = Mustache.render(e.templates[l], d), r.headerName.innerHTML = `${r.user.firstName}, `, r.headerTeam.innerHTML = `${r.club.clubName} `, e.clubBadge(r.contentWrapper, !0)
            }), 900), setTimeout((function() {
                a.style.removeClass(r.container, n)
            }), 1e3)) : (r.contentWrapper.innerHTML = Mustache.render(e.templates[l], d), e.clubBadge(r.contentWrapper, !0))
        }, e.PersonalisedVideo.prototype.getClubVideos = function() {
            const t = {
                    page: 0,
                    pageSize: 4,
                    references: "FOOTBALL_CLUB:" + this.club.id,
                    order: "timestamp desc"
                },
                i = {
                    url: e.common.createContentPath("video", t),
                    method: "GET",
                    callback: this.renderClubVideos,
                    forceCallback: !0,
                    target: this
                };
            a.data.request(i.url, i.method, i.callback, i.target)
        }, e.PersonalisedVideo.prototype.renderClubVideos = function(t) {
            const a = this;
            if (!t || !t.content || !t.content.length) return;
            const i = t.content;
            for (let t = 0; t < i.length; t++) {
                let o = a.setData(i[t]);
                o.clubId = a.club.id, setTimeout((function() {
                    a.videoWrapper.innerHTML = a.videoWrapper.innerHTML + Mustache.render(e.templates.personalisedvideo, o)
                }), 900)
            }
        }, e.PersonalisedVideo.prototype.setData = function(e) {
            let a, i = t.getContentModel(e, r);
            return a = e.thumbnail && e.thumbnail.onDemandUrl ? `${e.thumbnail.onDemandUrl}?width=350px` : `${e.imageUrl}`, {
                id: e.id,
                audioDescTitle: i.avString,
                closedCaptionTitle: i.ccString,
                videoPath: this.videoPath,
                type: e.type,
                mediaId: e.mediaId,
                uiArgs: e.uiArgs,
                title: e.title,
                description: e.description,
                subtitle: e.subtitle,
                duration: e.duration,
                durationFormatted: t.durationToTime(e.duration),
                link: i.link,
                dateFormatted: i.dateFormatted,
                leadMediaUrls: a || i.leadMediaUrls,
                publishFrom: e.pusblishFrom,
                isPortrait: i.isPortrait
            }
        }, e.PersonalisedVideo.prototype.renderDefaultLink = function() {
            const e = this.container.querySelector(".js-default-link");
            e && a.style.hasClass(e, o) && a.style.removeClass(e, o)
        };
        let s = document.querySelector('[data-widget="personalised-video"]');
        s && setTimeout((function() {
            e.PersonalisedVideo = new e.PersonalisedVideo(s)
        }))
    }(PULSE.app, PULSE.app.common, PULSE.core, PULSE.I18N),
    function(e, t, a) {
        const i = "u-hide";
        let o = {
            thumbnail: "Media Thumbnail - Small",
            thumbnailRetina: "Media Thumbnail - Large",
            thumbnailMobile: "Media Thumbnail - Small",
            thumbnailMobileRetina: "Media Thumbnail - Small"
        };
        e.PlaylistLoader = function(e) {
            const a = this;
            a.container = e, a.numLoadItems = parseInt(a.container.dataset.pageSize) || 4, a.loadBtn = a.container.querySelector(".js-load-more"), a.loader = a.container.querySelector(".js-loader");
            const o = a.container.querySelectorAll(".js-playlist-load-item");
            a.loadItems = Array.prototype.slice.call(o), a.loadItems.forEach((e => {
                a.getPlaylistLeadVideo(e)
            })), a.showItems(), setTimeout((function() {
                t.style.addClass(a.loader, i)
            })), a.loadBtn.addEventListener("click", (function() {
                t.style.removeClass(a.loader, i), setTimeout((function() {
                    a.showItems(), t.style.addClass(a.loader, i)
                }), 1e3)
            }))
        }, e.PlaylistLoader.prototype.showItems = function() {
            const e = this;
            for (let a = 1; a <= e.numLoadItems; a++) {
                const a = e.loadItems.shift();
                if (a) {
                    const e = a.querySelector(".js-playlist-image"),
                        o = e.dataset.src;
                    e.src = o, t.style.removeClass(a, i)
                } else t.style.addClass(e.loadBtn, i)
            }
            e.hideButton()
        }, e.PlaylistLoader.prototype.getPlaylistLeadVideo = function(a) {
            let i = this;
            if (!a.dataset.tag) return;
            let o = a.dataset.tag,
                n = a,
                l = {
                    pageSize: 1,
                    tagNames: o
                };
            t.data.manager.add({
                url: e.common.createContentPath("video", l),
                method: "GET",
                callback: e => {
                    i.handleResponse(e, n)
                },
                forceCallback: !0,
                target: this
            })
        }, e.PlaylistLoader.prototype.handleResponse = function(i, n) {
            if (!i && !i.content && !i.content.length) return;
            let l = i.content[0],
                r = e.common.content.getContentModel(l, o),
                s = {};
            s.id = l.id, s.title = l.title, s.closedCaption = l.closedCaptioned, s.description = l.description, s.duration = l.duration, s.durationFormatted = e.common.durationToTime(l.duration), s.dateFormatted = r.dateFormatted, s.leadMediaUrls = r.leadMediaUrls, s.thumbnail = a.getImageUrl(l.thumbnail, "128", "72"), l.tags && (s.fantasy = l.tags.filter((function(e) {
                return "Fantasy" === e.label
            }))), l.references && (s.audioDescription = l.references.filter((function(e) {
                return "ACCESSIBLE_VIDEO" === e.type
            })));
            let d = {
                title: n.querySelector(".js-video-title"),
                thumbnail: n.querySelector(".js-video-tumbnail"),
                duration: n.querySelector(".js-video-duration"),
                captions: n.querySelector(".js-video-captions"),
                audioDescription: n.querySelector(".js-video-audio-description")
            };
            d.title.innerText = s.title, d.thumbnail.src = s.thumbnail, d.duration.innerText = s.durationFormatted, s.closedCaption || d.captions.remove(), s.audioDescription || d.audioDescription.remove(), t.style.removeClass(d.thumbnail, "playlist-item__preview-thumbnail-image--placeholder");
            let c = n.querySelector(".js-playlist-link"),
                u = n.dataset.playlistid;
            c && u && (c.href = a.generateContentUrl("video", `${s.id}${u}`))
        }, e.PlaylistLoader.prototype.hideButton = function() {
            const e = this;
            0 === e.container.querySelectorAll(".js-playlist-load-item.u-hide").length && t.style.addClass(e.loadBtn, i)
        };
        const n = document.querySelectorAll('[data-widget="playlist-loader"]');
        Array.prototype.slice.call(n).forEach((function(t) {
            new e.PlaylistLoader(t)
        }))
    }(PULSE.app, PULSE.core, PULSE.app.common),
    function(e, t, a) {
        let i = {
                DEFAULT: [],
                PAUSED: ["is-paused"],
                PLAYING: ["is-playing"]
            },
            o = {
                thumbnail: "Media Thumbnail - Small",
                thumbnailRetina: "Media Thumbnail - Large",
                thumbnailMobile: "Media Thumbnail - Small",
                thumbnailMobileRetina: "Media Thumbnail - Small"
            };
        e.AutoPlaylistItem = function(e, t) {
            let a = this;
            a.setConfig(t), a.setData(e), a.container = a.getElement(), a.eventTarget = document.querySelector("body"), a.setListeners()
        }, e.AutoPlaylistItem.prototype.setConfig = function(e) {
            let t = this;
            e = e || {}, t.container = void 0 !== e.container ? e.container : null, t.template = e.template || "auto_playlist_item", t.variants = e.variants || o
        }, e.AutoPlaylistItem.prototype.setData = function(a) {
            let i = this,
                o = e.common.content.getContentModel(a, i.variants);
            i.id = a.id, i.type = a.type, i.category = t.content.getVideoTag(a) || "No Section", i.mediaId = a.mediaId, i.title = a.title, i.closedCaption = a.closedCaptioned, i.description = a.description, i.subtitle = a.subtitle, i.duration = a.duration, i.durationFormatted = e.common.durationToTime(a.duration), i.link = o.link, i.dateFormatted = o.dateFormatted, i.leadMediaUrls = o.leadMediaUrls, i.publishFrom = a.pusblishFrom, i.isPortrait = o.isPortrait, i.thumbnail = {
                imageUrl: t.getImageUrl(a.thumbnail, "350", "220"),
                imageUrlDesktop: t.getImageUrl(a.thumbnail, "135", "85"),
                imageUrl2x: t.getImageUrl(a.thumbnail, "270", "170"),
                imageTabletUrl: t.getImageUrl(a.thumbnail, "330", "200"),
                imageMobileUrl: t.getImageUrl(a.thumbnail, "205", "115")
            }, a.tags && (i.fantasy = a.tags.filter((function(e) {
                return "Fantasy" === e.label
            }))), a.references && (i.audioDescription = a.references.filter((function(e) {
                return "ACCESSIBLE_VIDEO" === e.type
            })))
        }, e.AutoPlaylistItem.prototype.setListeners = function() {
            let a = this;
            a.container.addEventListener("click", (function(i) {
                t.event.dispatch(e.common.event.PLAYLIST.SET_MEDIA, {
                    video: a
                }, a.eventTarget), i.preventDefault()
            })), a.eventTarget.addEventListener(e.common.event.VIDEO.PAUSE, (function(e) {
                e.detail.mediaId === a.mediaId && a.setVideoState("PAUSED")
            })), a.eventTarget.addEventListener(e.common.event.VIDEO.PLAY, (function(e) {
                e.detail.mediaId === a.mediaId ? a.setVideoState("PLAYING") : "DEFAULT" !== a.state && a.resetState()
            }))
        }, e.AutoPlaylistItem.prototype.resetState = function() {
            let e = this;
            e.state = "DEFAULT", e.setVideoStateClasses(e.state)
        }, e.AutoPlaylistItem.prototype.setInitialPlayState = function() {
            let e = this;
            e.state = "PLAYING", e.setVideoStateClasses(e.state)
        }, e.AutoPlaylistItem.prototype.setVideoState = function(e) {
            this.state = e, this.setVideoStateClasses(e)
        }, e.AutoPlaylistItem.prototype.getElement = function() {
            const a = this;
            if (a.container) return a.container;
            const i = {
                item: a
            };
            return t.templating.stringToElement(Mustache.render(e.templates[a.template], i))
        }, e.AutoPlaylistItem.prototype.setVideoStateClasses = function(e) {
            let t = this;
            if (!i[e]) return;
            let o = [];
            for (let t in i) t !== e && (o = o.concat(i[t]));
            o.forEach((function(e) {
                a.style.removeClass(t.container, e)
            })), i[e].forEach((function(e) {
                a.style.addClass(t.container, e)
            }))
        }
    }(PULSE.app, PULSE.app.common, PULSE.core),
    function(e, t, a) {
        let i = {
            callback: null,
            parseUrl: !1
        };
        e.AutoPlaylist = function(t, n) {
            const l = this;
            l.container = t, l.title = document.querySelector(".js-playlist-title"), l.config = a.object.extend({}, n || i), l.items = o(l.container), l.videoTags = e.common.widget.getArrayAttribute("data-tags", l.container), l.requestConfig = {
                filter: {},
                type: "video",
                id: null,
                sidebarUrl: n.sidebarURL
            }, l.pagination = null, l.config.parseUrl && l.defineRequest()
        }, e.AutoPlaylist.prototype.defineRequest = function() {
            const e = this;
            e.requestConfig.type = "video", e.requestConfig.id = null, e.requestConfig.filter && (e.requestConfig.filter.tagNames = "", e.requestConfig.filter.referenceExpression = "");
            let t = {};
            if (t = e.requestConfig.sidebarUrl ? {
                    playlist: a.url.getParameterByName("PLAYLIST", e.requestConfig.sidebarUrl),
                    tag: a.url.getParameterByName("TAG", e.requestConfig.sidebarUrl),
                    clubs: a.url.getParameterByName("FOOTBALL_CLUBS", e.requestConfig.sidebarUrl),
                    people: a.url.getParameterByName("FOOTBALL_PERSONS", e.requestConfig.sidebarUrl),
                    mostWatched: a.url.getParameterByName("MOST_WATCHED", e.requestConfig.sidebarUrl)
                } : {
                    playlist: a.url.getParam("PLAYLIST"),
                    tag: a.url.getParam("TAG"),
                    clubs: a.url.getParam("FOOTBALL_CLUBS"),
                    people: a.url.getParam("FOOTBALL_PERSONS"),
                    mostWatched: a.url.getParam("MOST_WATCHED")
                }, e.requestConfig.filter = a.object.extend(e.requestConfig.filter, {
                    page: 0,
                    detail: "DETAILED",
                    pageSize: a.url.getParam("pageSize") || 10,
                    fullObjectResponse: !0
                }), t.playlist) e.requestConfig.type = "playlist", e.requestConfig.id = t.playlist;
            else if (t.tag) e.requestConfig.filter.tagNames = t.tag, e.title.innerHTML = t.tag + " Playlist";
            else if (t.people) {
                const a = t.people.split(",");
                let i = "";
                a.forEach((function(e, t) {
                    0 !== t && (i += "or"), i = i + "FOOTBALL_PERSON:" + e
                })), e.requestConfig.filter.referenceExpression = i, e.title.innerHTML = "More Videos"
            } else if (t.clubs) {
                const a = t.clubs.split(",");
                let i = "";
                a.forEach((function(e, t) {
                    0 !== t && (i += "or"), i = i + "FOOTBALL_CLUB:" + e
                })), e.requestConfig.filter.referenceExpression = i, e.title.innerHTML = "More Videos"
            } else t.mostWatched ? (e.requestConfig.filter.viewCountWindowSeconds = t.mostWatched, e.title.innerHTML = "Most Watched") : e.title.innerHTML = "Latest Videos"
        }, e.AutoPlaylist.prototype.getData = function() {
            let t = this;
            const i = {
                url: e.common.createContentPath(t.requestConfig.type, t.requestConfig.filter, void 0, t.requestConfig.id),
                method: "GET",
                callback: t.processData,
                target: t,
                forceCallback: !0
            };
            a.data.manager.add(i)
        }, e.AutoPlaylist.prototype.processData = function(e, t) {
            let a = this;
            e && "number" != typeof e.status ? e.content && e.content.length > 0 ? (a.pagination = e.pageInfo, a.render(e.content)) : e.items && e.items.length > 0 && (a.title.innerHTML = e.title, a.pagination = e.pageInfo, a.render(e.items.map((function(e) {
                return e.response
            })))) : (console.warn(e), "function" == typeof a.config.callback && a.config.callback())
        }, e.AutoPlaylist.prototype.render = function(t) {
            let a = this;
            t.filter((function(e) {
                return -1 === n(a.items, e.id)
            })).forEach((function(t) {
                let i = new e.AutoPlaylistItem(t);
                a.items.push(i), a.container.appendChild(i.getElement())
            })), "function" == typeof a.config.callback && a.config.callback()
        }, e.AutoPlaylist.prototype.getItemById = function(e) {
            let t = this;
            for (let a = 0; a < t.items.length; a++)
                if (t.items[a].id === e) return t.items[a];
            return null
        }, e.AutoPlaylist.prototype.getItemByMediaId = function(e) {
            let t = this;
            for (let a = 0; a < t.items.length; a++)
                if (t.items[a].mediaId === e) return t.items[a];
            return null
        }, e.AutoPlaylist.prototype.getNextItem = function(e) {
            let t, a = this;
            "number" == typeof e ? t = e : "object" == typeof e && e.id && (t = e.id);
            let i = n(a.items, t);
            return i + 1 !== a.items.length - 1 && i !== a.items.length - 1 || a.getNextPage(), a.items[i + 1]
        }, e.AutoPlaylist.prototype.getNextPage = function() {
            let e = this;
            return !!e.canLoadMore() && (e.requestConfig.filter.page++, e.getData(), !0)
        }, e.AutoPlaylist.prototype.canLoadMore = function() {
            let e = this;
            return e.pagination && e.pagination.page + 1 < e.pagination.numPages
        }, e.AutoPlaylist.prototype.getDuration = function() {
            return e.common.content.getTotalDuration(this.items)
        };
        const o = function(t) {
                let a = Array.prototype.slice.call(t.children).map((function(t) {
                    let a = function(t) {
                        return t.getAttribute("data-video-id") ? {
                            id: parseInt(t.getAttribute("data-video-id")),
                            type: "video",
                            title: t.getAttribute("data-video-title"),
                            description: t.getAttribute("data-video-description"),
                            subtitle: t.getAttribute("data-video-subtitle"),
                            duration: e.common.widget.getNumberAttribute("data-video-duration", t),
                            publishFrom: e.common.widget.getNumberAttribute("data-video-publish-from", t),
                            mediaId: t.getAttribute("data-media-id"),
                            thumbnail: null
                        } : null
                    }(t);
                    return a ? new e.AutoPlaylistItem(a, {
                        container: t
                    }) : null
                })).filter((function(e) {
                    return null !== e
                }));
                return a
            },
            n = function(e, t) {
                for (let a = 0; a < e.length; a++)
                    if (e[a].id === t) return a;
                return -1
            },
            l = document.querySelectorAll('[data-widget="auto-playlist"]');
        for (let t = 0; t < l.length; t++) {
            new e.AutoPlaylist(l[t], {
                parseUrl: !0
            }).getData()
        }
    }(PULSE.app, PULSE.app.common, PULSE.core),
    function(e) {
        e.PlaylistTracker = function(e, t) {
            const a = this;
            a.container = e, a.autoPlaylist = t, a.playedVideos = {}, a.lastVideoPlayed = 0, a.container.getAttribute("data-tracker-action") ? a.videoPlayer = a.container : a.videoPlayer = a.container.querySelector("[data-tracker-action]"), a.setListeners()
        }, e.PlaylistTracker.prototype.setListeners = function() {
            const t = this;
            t.container.addEventListener(e.common.event.VIDEO.PLAY, (function(e) {
                const a = t.autoPlaylist.getItemByMediaId(e.detail.mediaId);
                t.playedVideos[a.id] ? t.lastVideoPlayed !== a.id && (t.videoPlayer.setAttribute("data-tracker-status", !1), t.trackView(a.id)) : "true" !== t.videoPlayer.getAttribute("data-tracker-status") && t.trackView(a.id), t.lastVideoPlayed = a.id
            })), t.container.addEventListener(e.common.event.VIDEO.END, (function(e) {
                t.resetTracker(e.detail.mediaId)
            })), t.container.addEventListener(e.common.event.VIDEO.SET_MEDIA, (function(e) {
                t.lastVideoPlayed !== e.detail.video.id && t.resetTracker(e.detail.video.mediaId)
            }))
        }, e.PlaylistTracker.prototype.trackView = function(t) {
            new e.ContentTracker(this.videoPlayer, "VIEW", "VIDEO", t), this.playedVideos[t] = !0
        }, e.PlaylistTracker.prototype.resetTracker = function(e) {
            const t = this,
                a = t.autoPlaylist.getItemByMediaId(e);
            t.playedVideos[a.id] = !1, t.videoPlayer.setAttribute("data-tracker-status", !1)
        }
    }(PULSE.app),
    function(e, t, a) {
        const i = "video-auto-play",
            o = "auto-playlist-toggle--disabled";
        e.VideoSidebar = function(t, n) {
            const l = this;
            l.container = t, l.sidebarHeader = document.querySelector(".js-sidebar-header"), l.autoPlayToggle = l.sidebarHeader.querySelector(".js-playlist-toggle"), l.checkAutoPlayCookie = a.localStorage.getStorage(i), l.checkAutoPlayCookie ? l.autoPlay = "true" === l.checkAutoPlayCookie : l.autoPlay = !0, l.autoPlay ? a.style.removeClass(l.autoPlayToggle, o) : a.style.addClass(l.autoPlayToggle, o), l.durationMarker = l.container.querySelector(".js-duration"), l.playlistContainer = l.container.querySelector(".js-videos-list"), l.playerName = l.container.getAttribute("data-player-name"), l.scrollableContainer = document.querySelector(".js-sidebar-desktop"), l.currentVideoId = parseInt(l.playlistContainer.dataset.startVideoId), l.eventTarget = document.querySelector("body"), l.player = null, l.canScrollIntoView = !0;
            const r = {
                parseUrl: !0,
                sidebarURL: n,
                callback: function() {
                    l.onRender()
                }
            };
            l.autoPlaylist = new e.AutoPlaylist(l.playlistContainer, r), l.playlistTracker = new e.PlaylistTracker(document.body, l.autoPlaylist), l.onResize(), l.setListeners(), l.autoPlaylist.getData()
        }, e.VideoSidebar.prototype.setListeners = function() {
            const e = this;
            a.event.windowResize.add({
                method: e.onResize.bind(e)
            }), e.eventTarget.addEventListener(t.event.PLAYLIST.SET_MEDIA, (function(t) {
                e.currentVideoId = t.detail.video.id, e.bringVideoIntoView()
            })), e.eventTarget.addEventListener(t.event.VIDEO.CLOSE_FULL_SCREEN, (function() {
                e.onResize()
            })), e.eventTarget.addEventListener(t.event.VIDEO.END, e.advancePlaylist.bind(e)), e.autoPlayToggle.addEventListener("click", (function() {
                e.autoPlay = !e.autoPlay, a.localStorage.setStorage(i, e.autoPlay), a.style.toggleClass(e.autoPlayToggle, "auto-playlist-toggle--disabled")
            }));
            let o = !1;
            e.scrollableContainer.addEventListener("scroll", (function(t) {
                o || (window.requestAnimationFrame((function() {
                    e.onSidebarScroll(), o = !1
                })), o = !0)
            }))
        }, e.VideoSidebar.prototype.advancePlaylist = function() {
            const e = this;
            if (e.autoPlay) {
                let a = e.autoPlaylist.getNextItem(e.currentVideoId);
                if (a) {
                    e.autoPlaylist.getItemById(e.currentVideoId).resetState(), a.setInitialPlayState(), e.currentVideoId = a.id, t.event.dispatch(t.event.PLAYLIST.SET_MEDIA, {
                        video: a
                    }, e.eventTarget), e.onSidebarScroll()
                }
            }
        }, e.VideoSidebar.prototype.onResize = function() {
            const t = this;
            window.outerWidth > e.measurements.tablet && (t.config = {
                scrollBoundary: ".js-video-sidebar"
            }), window.outerWidth <= e.measurements.tablet && (t.config = {
                scrollBoundary: ".js-sidebar-mobile"
            }), t.loader && t.loader.reset()
        }, e.VideoSidebar.prototype.didRequestLoad = function() {
            this.autoPlaylist.getNextPage() && this.loader
        }, e.VideoSidebar.prototype.onRender = function() {
            const e = this;
            e.loader && (e.loader.contentLoaded(), e.loader.removeLoader(), e.autoPlaylist.canLoadMore() ? e.loader.newLoader() : e.loader.completedDataLoad()), !e.loader && e.autoPlaylist.canLoadMore() && (e.loader = new t.ScrollLoader(e.playlistContainer, e, !0))
        }, e.VideoSidebar.prototype.isVisibleInScrollView = function(e) {
            let t = e.getBoundingClientRect(),
                a = document.querySelector(this.config.scrollBoundary).getBoundingClientRect(),
                i = a.top,
                o = a.bottom;
            return t.top >= i && o >= t.bottom
        }, e.VideoSidebar.prototype.bringVideoIntoView = function() {
            const e = this,
                a = e.autoPlaylist.getItemById(e.currentVideoId).getElement();
            e.canScrollIntoView && !e.isVisibleInScrollView(a) && t.scrollElementAnimated(e.config.scrollBoundary, a, -65, 50, e.onSidebarScroll.bind(e))
        }, e.VideoSidebar.prototype.onSidebarScroll = function() {
            const e = this,
                t = e.autoPlaylist.getItemById(e.currentVideoId);
            e.canScrollIntoView = e.isVisibleInScrollView(t.getElement())
        };
        const n = document.querySelectorAll('[data-widget="video-sidebar"]');
        for (let t = 0; t < n.length; t++) new e.VideoSidebar(n[t])
    }(PULSE.app, PULSE.app.common, PULSE.core),
    function(e, t, a) {
        let i = "body",
            o = "play-video-w",
            n = {
                root: null,
                rootMargin: "0px",
                threshold: .025
            };
        e.VideoPagePlayer = function(e) {
            const a = this;
            a.container = e, a.eventTarget = document.querySelector(i), a.playerCol = document.querySelector(".main-video-col"), a.videoPlayerContainer = document.querySelector(".js-video-container"), a.videoPlayer = document.querySelector('[data-widget="video-player_v2"]'), a.playerMuted = !1, a.playerName = a.container.getAttribute("data-player-name"), a.urlQuery = location.href.split("?")[1], a.player = null, a.videoId = a.container.dataset.videoId, a.disableMiniPlayer = a.container.dataset.disableMiniPlayer, a.eventTarget = document.querySelector(i), a.shareId = a.container.dataset.shareId;
            let o = a.container.querySelector(".js-video-player-social-share"),
                n = window.location.hostname + "/video/single/" + a.shareId + window.location.search;
            a.pageShare ? a.pageShare.setUrl(n) : o && (a.pageShare = new t.pageShare(o, n)), a.setListeners()
        }, e.VideoPagePlayer.prototype.getPlayer = function() {
            const t = this;
            return t.player || (t.player = e.videoPlayerManager.getPlayerWithName(t.playerName), t.player && t.player.attemptToFindMetaDivs(t.container)), t.player
        }, e.VideoPagePlayer.prototype.playVideo = function(e, t) {
            const i = this;
            let n = i.getPlayer();
            if (n) {
                let l;
                n.api.mediainfo.id !== e.mediaId && i.setPageContext(e), l = !(!e.audioDescription || !e.audioDescription.length) && e.audioDescription[0].id, e.noAutoplay = !!e.noAutoplay && e.noAutoplay, n.playVideoWithID(e.mediaId, l, e.id, t, e.noAutoplay), a.style.toggleClass(i.miniPause, o)
            } else console.error("Trying to play video with ID " + e.id + " but video player not ready")
        }, e.VideoPagePlayer.prototype.pauseVideo = function(e) {
            let t = this.getPlayer();
            t ? t.api.mediainfo.id !== e.mediaId || t.api.paused() || t.api.pause() : console.error("Trying to pause video with ID " + e.id + " but video player not ready")
        }, e.VideoPagePlayer.prototype.setPageContext = function(e) {
            const a = this;
            if (a.getPlayer().setMeta({
                    title: e.title,
                    description: e.description,
                    date: e.dateFormatted,
                    duration: e.durationFormatted,
                    contentId: e.id,
                    subtitle: e.subtitle
                }), !e.noUpdateUrl) {
                let i = t.generateContentUrl(e.type, e.id) + (a.urlQuery ? "?" + a.urlQuery : "");
                history.pushState({}, "Video: " + e.title, i), t.metadata.setTitles(e.title), t.metadata.setDescriptions(e.description || "")
            }
        }, e.VideoPagePlayer.prototype.setListeners = function() {
            const i = this;
            i.eventTarget.addEventListener(t.event.PLAYLIST.SET_MEDIA, (function(e) {
                let t = i.getPlayer();
                "undefined" != typeof pSUPERFLY && pSUPERFLY.virtualPage({
                    sections: e.detail.video.category,
                    title: e.detail.video.title
                }), t && (e.detail.video.mediaId === t.videoID ? t.api.paused() ? i.playVideo(e.detail.video, !1) : i.pauseVideo(e.detail.video) : i.playVideo(e.detail.video, !0))
            })), i.muteBtn = i.container.querySelector(".js-mute"), i.muteBtn.addEventListener("click", (function(e) {
                i.playerMuted = !i.playerMuted, i.getPlayer().api.muted(i.playerMuted), a.style.toggleClass(e.target, "icn-unmuted")
            })), i.miniPause = i.container.querySelector(".js-mini-pause"), i.miniPause.addEventListener("click", (function(e) {
                let t = i.getPlayer();
                a.style.toggleClass(e.target, o), t.api.paused() ? t.api.play(!0) : t.api.pause(!0)
            })), i.toTop = i.container.querySelector(".js-to-top"), i.toTop.addEventListener("click", (function(e) {
                t.scrollElementAnimated(".main-video-col", i.playerCol, 0, 70)
            })), i.miniClose = i.container.querySelector(".js-mini-close"), i.miniClose.addEventListener("click", (function(e) {
                i.getPlayer().api.pause(!0), i.hideMiniPlayer()
            })), i.eventTarget.addEventListener(e.common.event.VIDEO.PAUSE, (function(e) {
                a.style.addClass(i.miniPause, o)
            })), i.eventTarget.addEventListener(e.common.event.VIDEO.PLAY, (function(e) {
                a.style.removeClass(i.miniPause, o)
            })), i.playerObserver = new IntersectionObserver(i.handlePlayerScroll.bind(i), n), i.playerObserver.observe(i.videoPlayerContainer)
        }, e.VideoPagePlayer.prototype.handlePlayerScroll = function(t) {
            const a = this;
            if (a.getPlayer() && window.innerWidth >= e.measurements.tablet && !a.disableMiniPlayer) {
                let e = t[0];
                t[0].target;
                e.intersectionRatio > n.threshold ? a.hideMiniPlayer() : e.intersectionRatio < n.threshold && a.showMiniPlayer()
            }
        }, e.VideoPagePlayer.prototype.showMiniPlayer = function() {
            const e = this;
            a.style.addClass(e.videoPlayer, "mini-player-active"), a.style.addClass(e.videoPlayerContainer, "video-container--spacer"), e.getPlayer().api.controls(!1)
        }, e.VideoPagePlayer.prototype.hideMiniPlayer = function() {
            const e = this;
            a.style.removeClass(e.videoPlayer, "mini-player-active"), a.style.removeClass(e.videoPlayerContainer, "video-container--spacer"), e.getPlayer().api.controls(!0)
        };
        let l = document.querySelector('[data-widget="video-page-player"]');
        l && (e.videoPagePlayer = new e.VideoPagePlayer(l))
    }(PULSE.app, PULSE.app.common, PULSE.core),
    function(e, t) {
        let a = function() {
                o = [], this.scriptSource = "//players.brightcove.net/{{account}}/{{playerId}}_default/index.min.js?{{elementId}}", this.createScripts()
            },
            i = {},
            o = [],
            n = [];
        a.prototype.getPlayer = function() {
            if (o[0]) return i[o[0]]
        }, a.prototype.getPlayersMap = function() {
            return i
        }, a.prototype.getPlayerNameArray = function() {
            return o
        }, a.prototype.getPlayerWithName = function(e, t) {
            let a = o.filter((function(t) {
                return t === e
            }));
            return a.length > 0 ? i[a[0]] : !(!t || !i[0]) && i[0]
        }, a.prototype.addPlayer = function(t) {
            videojs(t.id).ready((function() {
                i[this.id_] = new e.videoPlayerBrightCoveVideo(this.el_.parentElement, this), o.push(this.id_), videojs(this.id_).on("play", (function() {
                    e.common.event.dispatch(e.common.event.VIDEO.PLAY, {
                        playerId: this.id_,
                        mediaId: this.mediainfo.id
                    }, this.el_)
                })), videojs(this.id_).on("pause", (function() {
                    e.common.event.dispatch(e.common.event.VIDEO.PAUSE, {
                        playerId: this.id_,
                        mediaId: this.mediainfo.id
                    }, this.el_)
                })), videojs(this.id_).on("ended", (function() {
                    e.common.event.dispatch(e.common.event.VIDEO.END, {
                        playerId: this.id_,
                        mediaId: this.mediainfo.id
                    }, this.el_)
                }))
            }))
        };
        a.prototype.createPlayers = function(t) {
            Array.prototype.forEach.call(document.querySelectorAll("video"), (function(t) {
                e.videoPlayerManager.addPlayer(t)
            }))
        }, a.prototype.createScripts = function() {
            let e = this,
                a = document.querySelectorAll("video");
            Array.prototype.map.call(a, (function(a, i, o) {
                let l = {
                    account: a.getAttribute("data-account"),
                    playerId: a.getAttribute("data-player"),
                    elementId: a.getAttribute("id")
                };
                if (l.account && l.playerId) {
                    let a = t.common.formatString(e.scriptSource, l);
                    if (-1 === n.indexOf(a)) {
                        let t = document.createElement("script");
                        document.getElementsByTagName("body")[0].appendChild(t), t.onload = e.createPlayers, t.src = a, n.push(a)
                    }
                }
            }))
        }, e.videoPlayerManager = new a, e.videoPlayerManager.onTemplateLoaded = function(t) {
            let a = brightcove.api.getExperience(t),
                i = a.getModule(brightcove.api.modules.APIModules.VIDEO_PLAYER);
            e.videoPlayerManager.registerPlayerApi(t, a, i)
        }
    }(PULSE.app, PULSE.core),
    function(e, t, a, i) {
        const o = "u-hide",
            n = "u-disabled";
        e.videoPlayerBrightCoveVideo = function(e, t) {
            const a = this;
            a.name = t.id_ || "default_player", a.api = t, a.catalog = a.api.catalog, a.players = document.querySelectorAll('[data-widget="video-player"]'), a.model = {
                "audioDesc-label": i.lookup("label.audiodescription"),
                "audioDesc-text": i.lookup("label.audiodescriptionavailable"),
                "disAudioDesc-text": i.lookup("label.disableaudiodescription"),
                "closedCap-label": i.lookup("label.closedcaption")
            }, a.idToPlayOnLoad = !1, a.ready = !1, a.element = e, a.metaElements = !1, a.id = "", a.requestConfig = {
                filter: {},
                type: "video",
                id: null
            }, a.attemptToFindMetaDivs(), a.hasWebVTT()
        }, e.videoPlayerBrightCoveVideo.prototype.setupTracking = function() {
            const t = this;
            let a = 0;
            const i = document.querySelectorAll(".video-js video");
            Array.prototype.map.call(i, (function(i) {
                const o = i.id,
                    n = videojs(o);
                n.off("play"), n.on("play", (function() {
                    const o = Math.floor(n.cache_.currentTime),
                        l = Math.floor(n.cache_.duration);
                    if (0 === o || o === l) {
                        a = parseInt(i.dataset.trackerId);
                        const o = {
                            contentType: "VIDEO",
                            contentId: t.trackerID,
                            action: "VIEW"
                        };
                        e.ContentTracker(o)
                    }
                }))
            }))
        }, e.videoPlayerBrightCoveVideo.prototype.attemptToFindMetaDivs = function() {
            const e = this;
            let t = e.element.closest(".js-video-wrapper");
            e.audioElement = t.querySelector(".js-audio-desc") || !1, e.captionElement = t.querySelector(".js-closed-caption") || !1, e.audioTextElement = t.querySelector(".js-audio-desc-text") || !1, e.metaElements = {
                title: t.querySelector(".js-video-title") || !1,
                description: t.querySelector(".js-video-description") || !1,
                date: t.querySelector(".js-video-date") || !1,
                duration: t.querySelector(".js-video-duration") || !1
            }
        }, e.videoPlayerBrightCoveVideo.prototype.hasWebVTT = function() {
            const e = this;
            e.embeddedVTT = e.element.firstElementChild.getAttribute("data-webVTT-id"), e.embeddedId = e.element.firstElementChild.getAttribute("data-video-id"), e.videoId = e.element.firstElementChild.getAttribute("data-video-id"), e.trackerID = e.element.firstElementChild.getAttribute("data-tracker-id"), e.id = e.trackerID, e.embeddedVTT && e.embeddedId && (e.articleEmbed = !0, e.checkCaptions()), e.setupTracking()
        }, e.videoPlayerBrightCoveVideo.prototype.setMeta = function(a) {
            const i = this;
            if (Object.keys(i.metaElements).map((function(e) {
                    let t = i.metaElements[e];
                    t && a[e] ? t.innerHTML = a[e] : t && "audioDesc" !== t.className && (t.innerHTML = "")
                })), a.hotlinkText && a.hotlinkUrl && -1 !== a.description.indexOf(a.hotlinkText)) {
                let t = -1 === a.hotlinkUrl.indexOf(e.environment.domain) ? 'target="_blank"' : "",
                    o = '<a href="' + a.hotlinkUrl + '"' + t + ">" + a.hotlinkText + "</a>",
                    n = a.description.replace(a.hotlinkText, o);
                i.metaElements.description.innerHTML = n
            }
            if (a.contentId) {
                let e = i.element.closest(".js-video-wrapper").querySelector(".js-video-player-social-share"),
                    o = window.location.hostname + "/video/single/" + a.contentId + window.location.search;
                i.pageShare ? i.pageShare.setUrl(o) : e && (i.pageShare = new t.pageShare(e, o))
            }
        }, e.videoPlayerBrightCoveVideo.prototype.playVideoWithID = function(e, t, a, i, o) {
            const n = this;
            n.newVideo = i, n.videoID && t || (n.videoID = e), void 0 !== a && (n.trackerID = a);
            for (let e = 0; e < n.players.length; e++) n.players[e].style.display = "";
            n.catalog.getVideo(e, (function(e, t) {
                n.catalog.load(t), o || n.api.play(), n.checkCaptions()
            }))
        }, e.videoPlayerBrightCoveVideo.prototype.setListeners = function(e, t) {
            const a = this;
            e && ["keypress", "click"].forEach((function(t) {
                e.addEventListener(t, (function(e) {
                    if (13 === e.which || "click" === e.type) {
                        let e = a.api.mediainfo.custom_fields.web_vtt;
                        if (e) a.embeddedId = a.api.mediainfo.id, a.audioTextElement.innerHTML = a.model["disAudioDesc-text"], a.playVideoWithID(e, !0);
                        else {
                            let e;
                            a.audioTextElement.innerHTML = a.model["audioDesc-text"], e = a.embeddedId ? a.embeddedId : a.videoID, a.playVideoWithID(e)
                        }
                    }
                }))
            }))
        }, e.videoPlayerBrightCoveVideo.prototype.checkCaptions = function() {
            const t = this;
            t.audioDescription = "", t.requestConfig.filter = a.object.extend(t.requestConfig.filter, {
                page: 0,
                detail: "DETAILED",
                pageSize: a.url.getParam("pageSize") || 1,
                fullObjectResponse: !0
            });
            const i = {
                url: e.common.createContentPath("VIDEO", t.requestConfig.filter, void 0, t.trackerID),
                method: "GET",
                callback: t.processData,
                target: t
            };
            a.data.manager.add(i)
        }, e.videoPlayerBrightCoveVideo.prototype.processData = function(t) {
            const a = this;
            if (!t) return;
            t.references && (a.audioDescription = t.references.filter((function(e) {
                return "ACCESSIBLE_VIDEO" === e.type
            })));
            let i = e.common.content.getContentModel(t, {});
            a.closedCaption = i.closedCaptioned, a.audioDescription.length || a.closedCaption ? (a.toggleADContainer(!0), a.audioDescription.length ? a.toggleAudioDesc(!0) : a.toggleAudioDesc(!1), a.closedCaption ? a.toggleClosedCaption(!0) : a.toggleClosedCaption(!1)) : (a.toggleAudioDesc(!1), a.toggleClosedCaption(!1), a.toggleADContainer(!1))
        }, e.videoPlayerBrightCoveVideo.prototype.toggleADContainer = function(e) {
            const t = this;
            e && t.audioElement ? a.style.removeClass(t.audioElement.parentElement, o) : t.audioElement && a.style.addClass(t.audioElement.parentElement, o)
        }, e.videoPlayerBrightCoveVideo.prototype.toggleAudioDesc = function(e) {
            const t = this;
            e ? (t.newVideo && (t.audioTextElement.innerHTML = t.model["audioDesc-text"]), a.style.hasClass(t.audioElement, o) && (a.style.removeClass(t.audioElement, o), a.style.removeClass(t.audioTextElement, o), a.style.removeClass(t.audioElement.parentElement, n)), t.setListenerSet || (t.setListeners(t.audioElement.parentElement), t.setListenerSet = !0)) : (a.style.addClass(t.audioElement, o), a.style.addClass(t.audioTextElement, o), a.style.addClass(t.audioElement.parentElement, n))
        }, e.videoPlayerBrightCoveVideo.prototype.toggleClosedCaption = function(e) {
            const t = this;
            t.captionElement, e ? a.style.hasClass(t.captionElement, o) && a.style.removeClass(t.captionElement, o) : a.style.addClass(t.captionElement, o)
        }, e.videoPlayerBrightCoveVideo.prototype.stopVideo = function() {
            this.api.pause()
        }, e.videoPlayerBrightCoveVideo.prototype.resetPlayer = function() {
            this.api.reset()
        }
    }(PULSE.app, PULSE.app.common, PULSE.core, PULSE.I18N),
    function(e, t, a) {
        const i = "is-active",
            o = "in-focus";
        e.VideoSearch = function(e) {
            const t = this;
            t.container = e, t.url = "/search", t.searchInputContainer = t.container.querySelector(".js-search-input"), t.searchButtonContainer = t.container.querySelector(".js-search-button-container"), t.term = "", t.setListeners(), t.searchInputContainer.value = ""
        }, e.VideoSearch.prototype.setListeners = function() {
            const e = this;
            e.searchInputContainer.addEventListener("keypress", (function(t) {
                13 === (t.keyCode || t.which) && e.searchTerm()
            })), e.searchInputContainer.addEventListener("focus", (function(t) {
                a.style.hasClass(e.searchInputContainer.parentElement, o) || a.style.addClass(e.searchInputContainer.parentElement, o)
            })), e.searchInputContainer.addEventListener("blur", (function(t) {
                a.style.hasClass(e.searchInputContainer.parentElement, o) && a.style.removeClass(e.searchInputContainer.parentElement, o)
            })), e.searchInputContainer.addEventListener("keyup", (function(t) {
                e.searchInputContainer.value.length > 0 ? (a.style.hasClass(e.container, i) || a.style.addClass(e.container, i), a.style.addClass(e.searchButtonContainer, i)) : a.style.hasClass(e.container, i) && (a.style.removeClass(e.container, i), a.style.removeClass(e.searchButtonContainer, i))
            })), e.searchButtonContainer.addEventListener("click", (function(t) {
                e.searchTerm()
            }))
        }, e.VideoSearch.prototype.searchTerm = function() {
            let e = this.url,
                t = this.searchInputContainer.value;
            t && "" !== t && (e += "?term=" + t + "&tab=Videos", window.location.href = e)
        };
        let n = document.querySelector('[data-widget="video-search"]');
        n && (e.VideoSearch = new e.VideoSearch(n))
    }(PULSE.app, PULSE.app.common, PULSE.core);