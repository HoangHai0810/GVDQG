"use strict";
PULSE.app.templates.matchweekblogentry = '<div class="blogCard"> <div class="cardMeta"> <div class="icon {{ iconClass }}"> {{#icon}} <div class="icn {{ icon.html }}"></div> {{/icon}} </div> <time>{{ time }}</time> </div> <div class="cardContent {{ cardClass }}"> <div class="score">{{ properties.score }}</div> <h6 class="header">{{ title }}</h6> <p>{{{ comment }}}</p> </div> </div>', PULSE.app.templates.matchweekheaderevent = "<li>{{{ title }}}</li>", PULSE.app.templates.matchweekpinnedblogentry = '<div class="blogCard blogCard__pinned"> <div class="cardMeta"> <div class="icon {{ iconClass }}"> {{#icon}} <div class="icn {{ icon.html }}"></div> {{/icon}} </div> <time>{{ time }}</time> </div> <div class="cardContent"> <p class="label"><span class="icn pin-post-w"></span> {{ pinLabel }}</p> <div class="score">{{ properties.score }}</div> <h6 class="header">{{ title }}</h6> <p>{{{ comment }}}</p> </div> </div> ', PULSE.app.templates.eventmodaldetails = '<div class="header"> <div class="keymoment"> <p>{{ time }}</p> <h4>{{ eventLabel }}</h4> </div> <div class="score"> <a href="{{ teams.0.url }}"> <span class="badgeContainer"> <span class="badge badge-image-container" data-widget="club-badge-image" data-size="25"> <img class="badge-image badge-image--25 js-badge-image" src="{{ teams.0.clubBadge }}" srcset="{{ teams.0.clubBadge }}, {{ teams.0.clubBadgeRetina }} 2x"> </span> </span><span class="visuallyHidden">{{ teams.0.name }}</span> </a> <h5> <span class="{{ teams.0.teamClass }}"><a href="{{ teams.0.url }}"><span class="long">{{ teams.0.name }}</span><span class="short">{{ teams.0.abbr }}</span></a> {{ teams.0.score }}</span> - <span class="{{ teams.1.teamClass }}">{{ teams.1.score }} <a href="{{ teams.1.url }}"><span class="long">{{ teams.1.name }}</span><span class="short">{{ teams.1.abbr }}</span></a></span> <h5> <a href="{{ teams.1.url }}"> <span class="badgeContainer"> <span class="badge badge-image-container" data-widget="club-badge-image" data-size="25"> <img class="badge-image badge-image--25 js-badge-image" src="{{ teams.1.clubBadge }}" srcset="{{ teams.1.clubBadge }}, {{ teams.1.clubBadgeRetina }} 2x"> </span> </span><span class="visuallyHidden">{{ teams.1.name }}</span> </a> </h5></h5></div> <a class="keyMomentLink" href="{{ url }}" class="btn">{{ mcLabel }}<span class="icn arrow-rightwhite"></span></a> </div> <div class="keyplayer"> {{#playerImage}} <a href="{{ personUrl }}" class="keyplayer-image"> <img class="playerPhotoContainer" data-player="{{ optaId }}" data-size="{{ imageSize }}" src="{{ image }}"> </a> {{/playerImage}} <div class="keyplayer-info"> <h5> <a href="{{ personUrl }}">{{ personName }}</a> <span><a href="{{ assistUrl }}">{{ assistLabel.long }} {{ assistName }}</a></span> </h5> </div> </div> ', PULSE.app.templates.matchweekevent = '<div class="event {{ eventType }}"> <span class="row"> <span class="type"> <span class="icn {{ eventClass }}"></span> {{ eventLabel }} </span> <span class="score"> <span class="{{ teams.0.teamClass }}"> {{ teams.0.abbr }} <span class="badge badge-image-container" data-widget="club-badge-image" data-size="20"> <img class="badge-image badge-image--20 js-badge-image" src="{{ teams.0.clubBadgeSmall }}" srcset="{{ teams.0.clubBadgeSmall }}, {{ teams.0.clubBadgeSmallRetina }} 2x"> </span> {{ teams.0.score }} </span> <span class="dash"> - </span> <span class="{{ teams.1.teamClass }}"> {{ teams.1.score }} <span class="badge badge-image-container" data-widget="club-badge-image" data-size="20"> <img class="badge-image badge-image--20 js-badge-image" src="{{ teams.1.clubBadgeSmall }}" srcset="{{ teams.1.clubBadgeSmall }}, {{ teams.1.clubBadgeSmallRetina }} 2x"> </span> {{ teams.1.abbr }} </span> </span> </span> {{#personName}} <span class="row"> <time class="min">{{ time }}</time> <span class="player">{{ personName }}</span> {{#assistPerson}} <span class="assist">{{ assistLabel.short }} {{ assistName }}</span> {{/assistPerson}} {{#modalLink}} <span class="icn add-w-sm matchEventModal"></span> {{/modalLink}} </span> {{/personName}} </div> ', PULSE.app.templates.nomatchevents = '<div class="noContentContainer">{{ label }}</div>', PULSE.app.templates.topplayer = '<li class="col-4-m"> <div class="statsCard"> <header> <h4 class="statsTitle">{{ statLabel }}</h4> <div class="statsCardSocialShare" data-render="statsshare" data-link-to="{{ url }}"></div> </header> <ul class="statsList"> {{#stats}} <li class="{{ statsClass }}"> <div class="statInfo"> <div class="pos">{{ index }}</div> <div> <a href="{{ url }}" class="statName">{{ owner.name.display }}</a> <a href="{{ team.url }}" class="statNameSecondary"> {{ team.name }} </a> </div> </div> <div class="stat"> {{#smallTeamBadge}} <div class="statsBadge"> <span class="badge badge-image-container" data-widget="club-badge-image" data-size="20"> <img class="badge-image badge-image--20 js-badge-image" src="{{ clubBadgeSmall }}" srcset="{{ clubBadgeSmall }}, {{ clubBadgeSmallRetina }} 2x"> </span> </div> {{/smallTeamBadge}} {{ value }} </div> {{#largeTeamBadge}} <div class="heroBadgeContainer"> <div class="statsBadge"> <span class="badge badge-image-container" data-widget="club-badge-image" data-size="25"> <img class="badge-image badge-image--25 js-badge-image" src="{{ clubBadge }}" srcset="{{ clubBadge }}, {{ clubBadgeRetina }} 2x"> </span> </div> </div> {{/largeTeamBadge}} {{#playerImage}} <div class="imgCropContainer"> <img class="img statCardImg playerPhotoContainer" data-player="{{ optaId }}" data-size="{{ imageSize }}" src="{{ playerImage }}"> </div> {{/playerImage}} </li> {{/stats}} </ul> <a class="btn widget-button" href="{{ url }}">{{ linkLabel }}<span class="icn arrow-right"></span></a> </div> </li> ', PULSE.app.templates.latestmatchweektext = '{{#contents}} <li> <section class="featuredArticle"> {{#hotlinkUrl}} <a href="{{ articleUrl }}?utm_source=premier-league-website&utm_campaign=website&utm_medium=link" target="_blank" class="thumbnail thumbLong"> {{/hotlinkUrl}} {{^hotlinkUrl}} <a href="{{ articleUrl }}" class="thumbnail thumbLong"> {{/hotlinkUrl}} <figure> {{#variant}} <span class="image"> <img src="{{ url }}" alt="{{ title }}"> </span> {{/variant}} <figcaption> {{#subtitle}} <span class="tag">{{ subtitle }}</span> {{/subtitle}} <span class="title">{{ title }}</span> <span class="text">{{ description }}</span> </figcaption> </figure> </a> </a></section> </li> {{/contents}} ', PULSE.app.templates.latestmatchweekvideo = '{{#contents}} <li data-ui-modal="#videoPlayer" data-ui-args="{{uiArgs}}"> <a href="#!" class="thumbnail videoThumb"> <figure> <span class="image"> {{#thumbnailUrl}} <img src="{{thumbnailUrl}}" alt=""> {{/thumbnailUrl}} <span class="runTime"> <span class="icn play-w"></span> <time datetime="PT2M59S">{{durationString}}</time> {{#ccString}}<span class="closedCaption">{{ccString}}</span>{{/ccString}} {{#avString}}<span class="audioDesc">{{avString}}</span>{{/avString}} </span> </span> <figcaption> <span class="title">{{title}}</span> </figcaption> </figure> </a> </li> {{/contents}}', PULSE.app.templates.nomatchweeklatestlist = '<li class="noContentContainer">{{ label }}</li>', PULSE.app.templates.matchweekloadermodal = '<div id="" class="pl-modal open"> <div class="pl-modal__content mcLoader"> <div class="mcLoading">{{ label }}</div> <div class="loader-small"><div class="line"></div></div> </div> </div>', PULSE.app.templates.matchweekmatchbroadcaster = ' <span class="broadcaster"><div class="logo broadcaster-{{ abbreviation }}"></div></span> ', PULSE.app.templates.matchweeknavdate = '<li> <div class="mcNavButton dayToggle open mcDayToggleNavContainer">{{ date }}<span class="icn chevron-downblack-normal"></span></div> <ul class="{{ date }}MatchContainer dayList"></ul> </li>', PULSE.app.templates.allquestions = '<h3 class="subHeader">{{ questionLabel }}</h3> <ul> {{#questions}} <li data-id="{{ id }}"> <div class="question"> <span>{{ text }}</span> <span class="icn arrow-right"></span> </div> </li> {{/questions}} </ul> <h3 class="subHeader">{{ answerLabel }}</h3> <ul> {{#answers}} <li data-id="{{ id }}"> <div class="question"> <span>{{ text }}</span> <span class="icn arrow-right"></span> </div> </li> {{/answers}} </ul>', PULSE.app.templates.pollanswers = '<h3 class="subHeader">{{ question.text }}</h3> <ul> {{#question.options}} <li> <div class="question answer"> <span>{{ text }}</span> <span>{{ percentage }}</span> <span class="bar" style="width: {{ percentage }};"></span> </div> </li> {{/question.options}} </ul>', PULSE.app.templates.pollquestionamount = '<span class="questions"> <strong class="">{{ number }}</strong> </span>', PULSE.app.templates.pollquestions = '<h3 class="subHeader">{{ question.text }}</h3> <ul> {{#question.options}} <li data-optionid="{{ id }}" data-questionid="{{ question.id }}"> <div class="question"> <span>{{ text }}</span> <span class="icn tick-w"></span> </div> </li> {{/question.options}} </ul>', PULSE.app.templates.matchweektable = '<tr class="{{ annotationClass }}" data-filtered-table-row="26" data-filtered-table-row-name="{{ longName }}" data-filtered-table-row-abbr="26"> <td class="pos"> <span class="value">{{ position }}</span> <span class="movement {{ movement }}"></span> </td> <td class="team" scope="row"> <a href="{{ url }}"> <span class="badge badge-image-container" data-widget="club-badge-image" data-size="20"> <img class="badge-image badge-image--20 js-badge-image" src="{{ clubBadge }}" srcset="{{ clubBadge }}, {{ clubBadgeRetina }} 2x"> </span> {{ longName }} </a> </td> <td>{{ overall.played }}</td> <td>{{ overall.goalsDifference }} </td> <td class="points">{{ overall.points }}</td> </tr> ',
    function(e, t, a, n, s) {
        let l = function(t) {
                let a = this,
                    n = {
                        method: "GET",
                        callback: a.renderBlog,
                        target: a
                    };
                return t ? (n.interval = e.pollingCacheRate, n.url = e.common.createLiveBlogPath(void 0, a.currentId, {
                    maxResults: 50
                })) : n.url = e.common.createLiveBlogPath(void 0, a.currentId, {}, a.belowPosition), n
            },
            o = function(e, t) {
                let n = this;
                n.blogFeeds[e] ? isNaN(t.interval) ? n.blogFeeds[e].request() : n.blogFeeds[e].start() : n.blogFeeds[e] = a.data.manager.add(t)
            },
            i = function(e, t, a, n) {
                for (let t in e)
                    if (e.hasOwnProperty(t)) {
                        let n = e[t],
                            s = n.config.url || "";
                        isNaN(n.interval) || s.match("PremierLeague/" + a) || n.stop()
                    }
                "function" == typeof n ? n() : console.warn("Error: Please supply a valid callback function to stopAnyOldPollingRequests")
            };
        e.matchWeekBlog = function(t) {
            let a = this;
            a.element = t, a.liveVidiprinterContainer = a.element.getElementsByClassName("liveVidiprinterContainer"), a.vidiScrollUp = a.element.getElementsByClassName("vidiScrollUp"), a.vidiScrollDown = a.element.getElementsByClassName("vidiScrollDown"), a.blogCommentButton = a.element.getElementsByClassName("blogCommentButton"), a.blogAuthorContainer = a.element.getElementsByClassName("blogAuthorContainer"), a.blogStream = a.element.getElementsByClassName("matchweekBlogStream"), a.blogIds = [], a.blogFeeds = [], a.type = "liveblog";
            let n = document.querySelectorAll('[data-widget="match-week-events"]');
            n.length > 0 && a.liveVidiprinterContainer.length > 0 && (Array.prototype.forEach.call(n, (function(e) {
                a.liveVidiprinterContainer[0].appendChild(e)
            })), a.checkVidiScroller()), a.currentId = a.element.getAttribute("data-blog-id"), a.getBlog(), a.matchweekDayDropdownContainer = a.element.getElementsByClassName("matchweekDayDropdownContainer"), a.setListeners(), a.renderTabs(), a.loader = new e.common.scrollLoader(a.blogStream[0], a, !0)
        }, e.matchWeekBlog.prototype.renderTabs = function() {
            let e = this,
                t = {
                    tabItems: e.element.getElementsByClassName("blogTabContainer"),
                    tabLinkWrap: e.element.querySelector(".tabs"),
                    builtClass: "mcBlog"
                };
            e.tabs = new s.tab(t)
        }, e.matchWeekBlog.prototype.setListeners = function() {
            let e = this;
            if (e.matchweekDayDropdownContainer.length > 0) {
                let a = {
                    updateCurrent: !0,
                    callback: e.changeBlogDay,
                    target: e
                };
                new t.dropdown(e.matchweekDayDropdownContainer[0], a)
            }
            if (e.vidiScrollUp.length > 0 && e.liveVidiprinterContainer.length > 0 && e.vidiScrollDown.length > 0 && (e.vidiScrollUp[0].addEventListener("click", (function() {
                    e.liveVidiprinterContainer[0].scrollTop -= 52
                })), e.vidiScrollDown[0].addEventListener("click", (function() {
                    e.liveVidiprinterContainer[0].scrollTop += 52
                })), e.liveVidiprinterContainer[0].addEventListener("scroll", (function() {
                    e.checkVidiScroller()
                }))), e.blogCommentButton.length > 0) {
                let t = e.blogCommentButton[0].getAttribute("data-email");
                e.blogCommentButton[0].addEventListener("click", (function(e) {
                    e.preventDefault(), window.location.href = "mailto:" + t
                }))
            }
        }, e.matchWeekBlog.prototype.checkVidiScroller = function() {
            let e = this;
            e.vidiScrollUp.length > 0 && e.liveVidiprinterContainer.length > 0 && e.vidiScrollDown.length > 0 && (e.liveVidiprinterContainer[0].scrollHeight - e.liveVidiprinterContainer[0].scrollTop === e.liveVidiprinterContainer[0].offsetHeight ? a.style.addClass(e.vidiScrollDown[0], "collapsed") : a.style.removeClass(e.vidiScrollDown[0], "collapsed"), 0 === e.liveVidiprinterContainer[0].scrollTop ? a.style.addClass(e.vidiScrollUp[0], "collapsed") : a.style.removeClass(e.vidiScrollUp[0], "collapsed"))
        }, e.matchWeekBlog.prototype.changeBlogDay = function(e) {
            let t = this,
                a = e.getAttribute("data-blog-id");
            a != t.currentId && (t.matchWeekBlogEntryContainer[0].innerHTML = "", t.currentId = a, t.belowPosition = void 0, t.changeAuthor(a), t.blogIds = [], t.getBlog())
        }, e.matchWeekBlog.prototype.changeAuthor = function(e) {
            let t = this;
            if (t.blogAuthorContainer.length > 0 && e)
                for (let a = 0; a < t.blogAuthorContainer.length; a++) {
                    let n = t.blogAuthorContainer[a].getAttribute("data-blog-id");
                    t.blogAuthorContainer[a].style.display = e != n ? "none" : ""
                }
        }, e.matchWeekBlog.prototype.getBlog = function() {
            let e = this,
                t = l.call(this, !0),
                a = "pollFeed" + t.url;
            i(e.blogFeeds, t.url, e.currentId, (function() {
                o.call(e, a, t)
            }))
        }, e.matchWeekBlog.prototype.getOlderBlogEntries = function() {
            let e = this;
            if (0 === e.belowPosition) return e.loader.contentLoaded(), void e.loader.completedDataLoad(!0);
            let t = l.call(this, !1),
                a = "historicFeed" + t.url;
            i(e.blogFeeds, t.url, e.currentId, (function() {
                o.call(e, a, t)
            }))
        }, e.matchWeekBlog.prototype.hasIdenticalBlogPosts = function(e) {
            let t = this;
            return 0 !== t.blogIds.length && (0 === t.getNewBlogPosts(e).length && 0 === t.getUpdatedBlogPosts(e).length && 0 === t.getDeletedBlogPosts(e).length)
        }, e.matchWeekBlog.prototype.getNewBlogPosts = function(e) {
            let t = this;
            return e.filter((function(e) {
                return t.blogIds.every((function(t) {
                    return e.id !== t.id
                }))
            }))
        }, e.matchWeekBlog.prototype.getUpdatedBlogPosts = function(e) {
            let t = this;
            return e.filter((function(e, a) {
                let n = e.pinnedEntry || !1;
                return e.newIndex = a, t.blogIds.some((function(t) {
                    return e.id === t.id && (e.updateTime !== t.updateTime || n !== t.pinnedEntry)
                }))
            }))
        }, e.matchWeekBlog.prototype.getDeletedBlogPosts = function(e) {
            return this.blogIds.filter((function(t, a) {
                return t.newIndex = -1, e.every((function(e) {
                    return t.id !== e.id && !t.nextPage
                }))
            }))
        }, e.matchWeekBlog.prototype.renderBlogEntries = function(a, s) {
            let l = this;
            if (l.matchWeekBlogEntryContainer = l.element.getElementsByClassName("matchWeekBlogEntryContainer"), 0 === l.matchWeekBlogEntryContainer.length) return;
            let o = l.rearrangeData(a);
            if (l.belowPosition = o[o.length - 1].position, l.hasIdenticalBlogPosts(o)) return;
            let i = [],
                r = [],
                c = l.getNewBlogPosts(o);
            if (r = c.length > 0 ? r.concat(c) : r, !s) {
                let e = l.getUpdatedBlogPosts(o);
                r = e.length > 0 ? r.concat(e) : r;
                let t = l.getDeletedBlogPosts(o);
                r = t.length > 0 ? r.concat(t) : r
            }
            r.forEach((function(t, a) {
                let o = function(t, a) {
                        let s = new Date(t.timestamp);
                        return t.cardClass = 0 === a ? "firstCard" : "", t.time = moment(s).locale(e.language).format("HH:mm"), t.iconClass = t.icon && t.icon.html ? t.icon.html : "", t.pinLabel = n.lookup("label.pinnedpost"), t
                    }(t, a),
                    r = document.querySelectorAll('[data-post-id="' + o.id + '"]'),
                    m = t.pinnedEntry || !1,
                    d = m ? "js-pinned-post" : "js-post",
                    p = l.matchWeekBlogEntryContainer[0].getElementsByClassName(d) || !1,
                    g = m ? "matchweekpinnedblogentry" : "matchweekblogentry",
                    u = t.newIndex || 0;
                if (r.length > 0) {
                    r[0].parentNode.removeChild(r[0]);
                    let e = l.blogIds.findIndex((function(e) {
                        return e.id === t.id
                    }));
                    if (l.blogIds.splice(e, 1), u < 0) return
                }
                i.push({
                    id: t.id,
                    updateTime: t.updateTime,
                    pinnedEntry: m,
                    nextPage: s
                });
                let h = document.createElement("LI");
                h.setAttribute("class", d), h.setAttribute("data-post-id", o.id), h.innerHTML = Mustache.render(e.templates[g], o), s ? l.matchWeekBlogEntryContainer[0].appendChild(h) : l.matchWeekBlogEntryContainer[0].childNodes.length > c.length ? p ? u > 0 ? l.matchWeekBlogEntryContainer[0].insertBefore(h, l.matchWeekBlogEntryContainer[0].childNodes[u]) : l.matchWeekBlogEntryContainer[0].insertBefore(h, p[u]) : l.matchWeekBlogEntryContainer[0].insertBefore(h, l.matchWeekBlogEntryContainer[0].firstElementChild) : l.matchWeekBlogEntryContainer[0].appendChild(h)
            })), l.blogIds = l.blogIds.concat(i), t.refreshScripts(l.matchWeekBlogEntryContainer[0])
        }, e.matchWeekBlog.prototype.rearrangeData = function(e) {
            let t = void 0 !== e.entries && e.entries.length > 0 ? e.entries.slice(0) : e,
                a = e.overview ? e.overview.header.keyEvents : [],
                n = t.sort((function(e, t) {
                    return t.position - e.position
                })),
                s = [],
                l = [];
            return a.forEach((function(e, t) {
                let a = n.findIndex((function(t) {
                    return t.id === e.entryId
                }));
                a >= 0 && (n[a].pinnedEntry = !0)
            })), n.forEach((function(e, t) {
                e.pinnedEntry || !1 ? s.push(e) : l.push(e)
            })), s.concat(l)
        }, e.matchWeekBlog.prototype.renderHeader = function(a) {
            let n = this;
            n.headerEventsContainer = n.element.getElementsByClassName("headerEventsContainer");
            let s = a.overview.header.headerEvents;
            if (n.headerEventsContainer.length > 0 && s) {
                let t = "";
                s.forEach((function(a) {
                    t += Mustache.render(e.templates.matchweekheaderevent, a)
                })), n.headerEventsContainer[0].innerHTML = t
            }
            if (n.matchweekBlogImageContainer = n.element.getElementsByClassName("matchweekBlogImageContainer"), n.matchweekBlogImageText = n.element.getElementsByClassName("js-matchweekBlogImageText"), n.matchweekBlogImageContainer.length > 0) {
                let e = "";
                if (a.overview.header.leadMedia && "photo" === a.overview.header.leadMedia.type) {
                    let n = t.getVariantWithWidth(a.overview.header.leadMedia.variants, 900);
                    n && (e = n.url)
                }
                n.url !== e && (n.matchweekBlogImageContainer[0].style.backgroundImage = "url(" + e + ")", n.url = e)
            }
            if (n.matchweekBlogImageText.length > 0) {
                let e = a.overview.header.leadMedia.title || "";
                n.matchweekBlogImageText[0].innerHTML = e
            }
            n.headerTitleContainer = n.element.getElementsByClassName("headerTitleContainer"), n.headerTitleContainer.length > 0 && (n.headerTitleContainer[0].innerHTML = a.overview.header.title)
        }, e.matchWeekBlog.prototype.didRequestLoad = function() {
            this.getOlderBlogEntries()
        }, e.matchWeekBlog.prototype.renderBlog = function(e, t) {
            let a = this,
                n = -1 === t.url.indexOf("below/");
            a.loader.contentLoaded(), e ? (a.renderBlogEntries(e, !n), e.overview && e.overview.header && a.renderHeader(e, t)) : a.loader.removeLoader()
        };
        let r = [].slice.call(document.querySelectorAll('[data-widget="match-week-blog"]'));
        for (let t = 0; t < r.length; t++) new e.matchWeekBlog(r[t], {})
    }(PULSE.app, PULSE.app.common, PULSE.core, PULSE.I18N, PULSE.ui),
    function(e, t, a, n, s) {
        let l = function(e, a) {
            let s = [],
                l = a ? "team-two" : "lowLight";
            switch (e.eventJson = JSON.stringify(e), ["homeTeam", "awayTeam"].forEach((function(a) {
                let n = {
                    optaId: e[a].altIds.opta,
                    clubBadge: t.getClubBadge(e[a].altIds.opta, "25"),
                    clubBadgeRetina: t.getClubBadge(e[a].altIds.opta, "25", !0),
                    clubBadgeSmall: t.getClubBadge(e[a].altIds.opta, "20"),
                    clubBadgeSmallRetina: t.getClubBadge(e[a].altIds.opta, "20", !0),
                    name: e[a].name,
                    abbr: e[a].club.abbr,
                    teamClass: "",
                    url: t.generateContentUrl("team", e[a].club.id, e[a].club.name.replace(new RegExp(" ", "g"), "-"))
                };
                "homeTeam" === a ? (n.score = e.score.homeScore, e.teamId !== e.homeTeam.id && (n.teamClass = l)) : (n.score = e.score.awayScore, e.teamId !== e.awayTeam.id && (n.teamClass = l)), s.push(n)
            })), e.teams = s, e.time = t.getEventTime(e), e.person && (e.personName = e.person.name.display, "O" === e.description ? e.personName += "( " + n.lookup("label.owngoal.short") + " )" : "P" === e.description && (e.personName += "( " + n.lookup("label.penalty.short") + ")"), e.personUrl = t.generateContentUrl("player", e.person.id, e.person.name.display.replace(new RegExp(" ", "g"), "-")), a && (e.playerImage = {}, e.playerImage.imageSize = "80x100", e.playerImage.image = t.getDefaultPlayerImg(e.imageSize), e.playerImage.optaId = e.person.altIds && e.person.altIds.opta ? e.person.altIds.opta : void 0)), e.assistPerson && (e.assistLabel = {
                short: n.lookup("label.assist.short") + ".",
                long: n.lookup("label.assistedby")
            }, e.assistName = e.assistPerson.name.display, e.assistUrl = t.generateContentUrl("player", e.assistPerson.id, e.assistPerson.name.display.replace(new RegExp(" ", "g"), "-"))), ("G" === e.type || e.description && ("Y" === e.description || "YR" === e.description || "R" === e.description)) && (e.modalLink = !0), e.description) {
                case "G":
                case "P":
                case "O":
                    e.eventType = "popUp goal";
                    break;
                case "Y":
                case "R":
                case "YR":
                    e.eventType = "popUp";
                    break;
                default:
                    e.eventType = "time"
            }
            return e.eventLabel = t.getEventLabel(e), e.eventClass = t.getEventTypeClass(e), e.url = t.generateContentUrl("match", e.fixtureId), e.mcLabel = n.lookup("label.matchcentre"), e
        };
        e.matchWeekEvents = function(e, a) {
            let n = this;
            n.element = e, n.matchweekEventsContainer = n.element.getElementsByClassName("matchweekEventsContainer"), n.compSeason = n.element.getAttribute("data-compseasons"), n.gameWeek = n.element.getAttribute("data-gameweeks"), n.statFeed = {}, n.initModel();
            new t.checkGameweek({
                compSeason: n.compSeason,
                gameWeek: n.gameWeek,
                target: this,
                callback: n.initEventData
            })
        }, e.matchWeekEvents.prototype.initModel = function() {
            let e = this,
                t = {
                    parent: e.element,
                    selector: "[data-ui-modal]",
                    openClass: "open",
                    modalId: "modalWrap",
                    closeText: "close",
                    openCallback: function(t) {
                        e.updateModal(t)
                    },
                    modalWrapClass: "pl-modal",
                    modalContentWrapClass: "pl-modal__content"
                };
            e.modal = new s.modal(t)
        }, e.matchWeekEvents.prototype.updateModal = function(a) {
            let n = this,
                s = a.config.current.uiArgs,
                o = a.config.current.content,
                i = o.getElementsByClassName("eventDetails"),
                r = o.getElementsByClassName("statLeaders");
            if (r && r.length > 0 && (r[0].innerHTML = "", n.getTopPlayers(s, r[0])), i && i.length > 0) {
                let a = l(s, !0),
                    n = Mustache.render(e.templates.eventmodaldetails, a);
                i[0].innerHTML = n, e.clubBadge(i[0], !0), t.getPhotosForContainer(i[0])
            }
        }, e.matchWeekEvents.prototype.getTopPlayers = function(e, t) {
            let a = this;
            "G" === e.type ? ("O" === e.description ? a.getTopPlayersFeed("own_goals", t) : "P" === e.description ? a.getTopPlayersFeed("att_pen_goal", t) : a.getTopPlayersFeed("goals", t), e.assistId && a.getTopPlayersFeed("goal_assist", t)) : "Y" === e.description ? a.getTopPlayersFeed("yellow_card", t) : a.getTopPlayersFeed("red_card", t)
        }, e.matchWeekEvents.prototype.getTopPlayersFeed = function(t, n) {
            let s = this,
                l = {
                    compSeasons: s.compSeason,
                    altIds: !0,
                    pageSize: 3,
                    page: 0,
                    statistic: t,
                    compCodeForActivePlayer: e.defaultCompCode
                },
                o = {
                    url: e.common.createApiPath("stats.ranked.players", l),
                    method: "GET",
                    callback: s.renderTopPlayers,
                    target: this,
                    container: n,
                    stat: t,
                    interval: e.pollingCacheRate,
                    compSeason: s.compSeason
                };
            s.statFeed[t] ? s.statFeed[t].start() : s.statFeed[t] = a.data.manager.add(o)
        }, e.matchWeekEvents.prototype.renderTopPlayers = function(a, s) {
            let l = this;
            if (l.statFeed[s.stat] && l.statFeed[s.stat].stop(), a && a.stats && a.stats.content && a.stats.content.length > 0 && s && s.container) {
                let l = "/stats/top/players/" + a.entity;
                s.compSeason && (l += "?se=" + s.compSeason);
                let o = {
                    statLabel: n.lookup("label.stat." + a.entity),
                    linkLabel: n.lookup("action.viewfulltable"),
                    url: l,
                    stats: []
                };
                a.stats.content.forEach((function(e, a) {
                    o.stats.push(function(e, a) {
                        return e.owner && (e.url = t.generateContentUrl("player", e.owner.id, e.owner.name.display.replace(new RegExp(" ", "g"), "-"))), e.index = a + 1, e.statsBadgeClass = "", 0 === a ? (e.imageSize = "110x140", e.playerImage = t.getDefaultPlayerImg(e.imageSize), e.optaId = e.owner && e.owner.altIds && e.owner.altIds.opta ? e.owner.altIds.opta : void 0, e.statsClass = "statsHero", e.statsBadgeClass = "heroBadgeContainer", e.teamInfoClass = "", e.smallTeamBadge = !1, e.largeTeamBadge = !0) : (e.statsClass = "statsRow", e.teamInfoClass = "teamInfo", e.smallTeamBadge = !0, e.largeTeamBadge = !1), e.owner && e.owner.currentTeam && (e.team = {
                            url: t.generateContentUrl("team", e.owner.currentTeam.club.id, e.owner.currentTeam.club.name.replace(new RegExp(" ", "g"), "-")),
                            opta: e.owner.currentTeam.altIds.opta,
                            name: e.owner.currentTeam.name,
                            clubBadge: t.getClubBadge(e.owner.currentTeam.altIds.opta, "25"),
                            clubBadgeRetina: t.getClubBadge(e.owner.currentTeam.altIds.opta, "25", !0),
                            clubBadgeSmall: t.getClubBadge(e.owner.currentTeam.altIds.opta, "20"),
                            clubBadgeSmallRetina: t.getClubBadge(e.owner.currentTeam.altIds.opta, "20", !0)
                        }), e
                    }(e, a))
                }));
                let i = Mustache.render(e.templates.topplayer, o);
                s.container.innerHTML += i, e.clubBadge(s.container, !0);
                let r = s.container.getElementsByClassName("statsCardSocialShare");
                for (let e = 0; e < r.length; e++) {
                    new t.pageShare(r[e])
                }
                t.getPhotosForContainer(s.container)
            }
        }, e.matchWeekEvents.prototype.initEventData = function(t) {
            let a = this;
            if (t) {
                let t = {
                        id: a.compSeason,
                        gw: a.gameWeek,
                        altIds: !0
                    },
                    n = {
                        url: e.common.createApiPath("competition-season.gameweeks.events.single", t),
                        method: "GET",
                        callback: a.renderEvents,
                        target: this,
                        interval: e.pollingCacheRate
                    };
                this.startData(n)
            }
        }, e.matchWeekEvents.prototype.renderEvents = function(t) {
            let a = this;
            if (t && t.events && a.matchweekEventsContainer && a.matchweekEventsContainer.length > 0) {
                let s = "";
                t.events.length > 0 && (t.events.reverse(), t.events.forEach((function(t) {
                    let a, n = l(t),
                        o = document.createElement("li");
                    if (n.modalLink) o.setAttribute("data-ui-modal", "#matchWeekEventsModal"), o.setAttribute("data-ui-args", t.eventJson), a = o;
                    else {
                        let e = document.createElement("a");
                        e.setAttribute("href", n.url), o.appendChild(e), a = e
                    }
                    let i = Mustache.render(e.templates.matchweekevent, n);
                    a.innerHTML = i, e.clubBadge(a, !0), s += o.outerHTML
                }))), 0 === t.events.length && (s = Mustache.render(e.templates.nomatchevents, {
                    label: n.lookup("label.nomatchevents")
                })), a.matchweekEventsContainer[0].innerHTML = s, a.initModel()
            }
        }, e.matchWeekEvents.prototype.startData = function(e) {
            a.data.manager.add(e)
        };
        let o = document.querySelectorAll('[data-widget="match-week-events"]');
        for (let t = 0; t < o.length; t++) new e.matchWeekEvents(o[t], {})
    }(PULSE.app, PULSE.app.common, PULSE.core, PULSE.I18N, PULSE.ui),
    function(e, t, a, n) {
        e.matchWeekLatestTeamFilter = function(e, a) {
            var n = this;
            for (var s in n.element = e, n.gameweek = n.element.getAttribute("data-gameweek"), n.contentTypes = {
                    text: {
                        container: document.querySelectorAll('[data-widget="match-week-latest-news"]'),
                        template: "latestmatchweektext"
                    },
                    video: {
                        container: document.querySelectorAll('[data-widget="match-week-latest-videos"]'),
                        template: "latestmatchweekvideo"
                    }
                }, n.contentTypes) n.contentTypes[s].container && n.contentTypes[s].container.length > 0 && (n.contentTypes[s].pageSize = n.contentTypes[s].container[0].getAttribute("data-page-size"), "video" === s && (n.videoList = new t.videoList(n.contentTypes[s].container[0])));
            var l = {
                callback: n.filterByTeam,
                updateCurrent: !0,
                target: n
            };
            new t.dropdown(n.element, l)
        }, e.matchWeekLatestTeamFilter.prototype.filterByTeam = function(e) {
            var t = this,
                a = e.getAttribute("data-club-id");
            t.clubId = "-1" != a ? a : void 0, t.getMatchContent("text"), t.getMatchContent("video")
        }, e.matchWeekLatestTeamFilter.prototype.renderContent = function(a, s) {
            var l = this;
            if (a && a.content) {
                var o = s.contentType;
                if (l.contentTypes[o].container && l.contentTypes[o].container.length > 0) {
                    var i = "",
                        r = [];
                    if (a.content.forEach((function(e) {
                            r.push(t.getContentModel(e))
                        })), a.content.length < 1 && ("video" === o || "text" === o)) i = Mustache.render(e.templates.nomatchweeklatestlist, {
                        label: n.lookup("label.nocontent" + o)
                    });
                    else {
                        var c = {
                            contents: r
                        };
                        i = Mustache.render(e.templates[l.contentTypes[o].template], c)
                    }
                    l.contentTypes[o].container[0].innerHTML = i, "video" === o && (l.videoList = new t.videoList(l.contentTypes.video.container[0]))
                }
            }
        }, e.matchWeekLatestTeamFilter.prototype.getMatchContent = function(t) {
            var a = this,
                n = ["FOOTBALL_GAMEWEEK:" + a.gameweek];
            a.clubId && n.push("FOOTBALL_CLUB:" + a.clubId);
            var s = {
                    page: 0,
                    references: n.join(","),
                    pageSize: a.contentTypes[t].pageSize
                },
                l = {
                    url: e.common.createContentPath(t, s),
                    method: "GET",
                    callback: a.renderContent,
                    contentType: t,
                    target: this
                };
            this.startData(l)
        }, e.matchWeekLatestTeamFilter.prototype.startData = function(e) {
            a.data.manager.add(e)
        };
        for (var s = document.querySelectorAll('[data-widget="match-week-latest-team-filter"]'), l = 0; l < s.length; l++) new e.matchWeekLatestTeamFilter(s[l], {})
    }(PULSE.app, PULSE.app.common, PULSE.core, PULSE.I18N),
    function(e, t, a, n) {
        e.matchWeekNav = function(s, l) {
            var o = this;
            if (o.element = s, o.matchWeekFixtureListContainer = o.element.getElementsByClassName("matchWeekFixtureListContainer"), t.renderKickOffData(o.element, {
                    className: "renderKOContainer",
                    format: "HH:mm"
                }), o.matchWeekFixtureListContainer && o.matchWeekFixtureListContainer.length > 0 && t.orderKickOffs(o.element, o.matchWeekFixtureListContainer[0], e.templates.matchweeknavdate, {
                    format: "dddd D MMMM",
                    className: "matchWeekMatchContainer"
                }), o.autoUrl = o.element.getAttribute("data-auto-url"), a.url.getParameterByName("match")) {
                var i = {
                    label: n.lookup("label.loadingmatchcentre")
                };
                o.element.innerHTML = Mustache.render(e.templates.matchweekloadermodal, i), window.location.href = o.autoUrl
            }
            o.mcDayToggleNavContainer = o.element.getElementsByClassName("mcDayToggleNavContainer"), o.matchWeekTableButton = o.element.getElementsByClassName("matchWeekTableButton"), o.scoresButton = o.element.getElementsByClassName("scoresButton"), o.scoresContainer = o.element.getElementsByClassName("matchList"), o.matchWeekLeagueTableContainer = o.element.getElementsByClassName("matchWeekLeagueTableContainer"), o.navButtons = o.element.getElementsByClassName("mcNavButton"), o.setListeners(), o.requestConfig = {
                page: 0
            }, o.requestConfig.gameweeks = o.element.getAttribute("data-gameweeks"), o.sort = o.element.getAttribute("data-sort"), "DESCENDING" === o.sort ? o.requestConfig.sort = "desc" : o.requestConfig.sort = void 0;
            new t.pollMatches(o.element, o.requestConfig, {
                matchClass: "matchNavMatchContainer"
            }), new t.getBroadcasters(o.element, {
                containerClass: "mcNavBroadcasterContainer"
            })
        }, e.matchWeekNav.prototype.setListeners = function() {
            var t = this;
            Array.prototype.map.call(t.mcDayToggleNavContainer, (function(e) {
                e.addEventListener("click", (function() {
                    a.style.toggleClass(e, "open")
                }))
            })), t.matchWeekTableButton && t.matchWeekTableButton.length > 0 && t.matchWeekLeagueTableContainer && t.matchWeekLeagueTableContainer.length > 0 && t.matchWeekTableButton[0].addEventListener("click", (function(a, n) {
                a.preventDefault(), t.matchWeekTable ? t.matchWeekTable.toggleOpen() : t.matchWeekTable = new e.matchWeekTable(t.matchWeekLeagueTableContainer[0], {})
            }))
        };
        for (var s = document.querySelectorAll('[data-widget="match-week-nav"]'), l = 0; l < s.length; l++) new e.matchWeekNav(s[l], {})
    }(PULSE.app, PULSE.app.common, PULSE.core, PULSE.I18N),
    function(e, t, a, n) {
        var s = function(t) {
            var n = a.localStorage.getStorage(e.cookiePrefix + "Matchweekpoll" + t.id, !0);
            return !(!n || "" == n)
        };
        e.matchWeekPoll = function(e, t) {
            var a = this;
            a.element = e, a.gameweek = a.element.getAttribute("data-gameweek"), a.fanPollQuestionNumberContainer = a.element.getElementsByClassName("fanPollQuestionNumberContainer"), a.matchWeekPollButton = a.element.getElementsByClassName("matchWeekPollButton"), a.matchWeekQuestionContainer = a.element.getElementsByClassName("matchWeekQuestionContainer"), a.allQuestionsContainer = a.element.getElementsByClassName("allQuestionsContainer"), a.matchweekOptionsContainer = a.element.getElementsByClassName("matchweekOptionsContainer"), a.matchWeekOptionRenderContainer = a.element.getElementsByClassName("matchWeekOptionRenderContainer"), a.matchweekOptionsBackButton = a.element.getElementsByClassName("matchweekOptionsBackButton"), a.matchweekOptionsCloseButton = a.element.getElementsByClassName("matchweekOptionsCloseButton"), a.pollName = "pl_2016_17", a.questions = [], a.answers = [], a.questionMap = {}, a.setListeners(), a.refreshPollData()
        }, e.matchWeekPoll.prototype.setListeners = function() {
            var e = this;
            e.matchWeekPollButton && e.matchWeekPollButton.length > 0 && e.matchWeekPollButton[0].addEventListener("click", (function() {
                e.matchWeekQuestionContainer && e.matchWeekQuestionContainer.length > 0 && (a.style.addClass(e.matchWeekQuestionContainer[0], "open"), a.style.addClass(e.element, "open"))
            })), e.allQuestionsContainer && e.allQuestionsContainer.length > 0 && e.allQuestionsContainer[0].addEventListener("click", (function(t) {
                for (var a = t.target; a && a.parentNode !== e.allQuestionsContainer[0] && a.parentNode && "UL" !== a.parentNode.tagName;)
                    if (!(a = a.parentNode)) return;
                if ("LI" === a.tagName) {
                    var n = a.getAttribute("data-id");
                    e.renderQuestion(n)
                }
            })), e.matchweekOptionsBackButton && e.matchweekOptionsBackButton.length > 0 && e.matchweekOptionsBackButton[0].addEventListener("click", (function(t) {
                e.currentQuestion = void 0, e.allQuestionsContainer && e.allQuestionsContainer.length > 0 && (e.allQuestionsContainer[0].style.display = ""), e.matchweekOptionsContainer && e.matchweekOptionsContainer.length > 0 && (e.matchweekOptionsContainer[0].style.display = "none")
            })), e.matchweekOptionsCloseButton && e.matchweekOptionsCloseButton.length > 0 && e.matchweekOptionsCloseButton[0].addEventListener("click", (function(t) {
                a.style.removeClass(e.matchWeekQuestionContainer[0], "open"), a.style.removeClass(e.element, "open")
            })), e.matchWeekOptionRenderContainer && e.matchWeekOptionRenderContainer.length > 0 && e.matchWeekOptionRenderContainer[0].addEventListener("click", (function(t) {
                for (var a = t.target; a && a.parentNode !== e.matchWeekOptionRenderContainer[0] && a.parentNode && "UL" !== a.parentNode.tagName;)
                    if (!(a = a.parentNode)) return;
                if ("LI" === a.tagName) {
                    var n = a.getAttribute("data-optionid"),
                        s = a.getAttribute("data-questionid");
                    null != n && null != s && e.answerQuestion(s, n)
                }
            }))
        }, e.matchWeekPoll.prototype.answerQuestion = function(e, n) {
            var s = {
                url: t.createPollAnswerUrl(e, n),
                method: "GET",
                callback: this.answeredQuestion,
                target: this,
                jsonpCallback: "JSON_CALLBACK",
                questionId: e,
                optionId: n
            };
            a.data.manager.add(s)
        }, e.matchWeekPoll.prototype.answeredQuestion = function(t, n) {
            var s = this;
            t && n && n.questionId && a.localStorage.setStorage(e.cookiePrefix + "Matchweekpoll" + n.questionId, n.optionId, 100, !0), s.questionMap[n.questionId] && (s.questionMap[n.questionId].hasAnswer = !0, s.renderQuestion(n.questionId), s.initPollData(!0))
        }, e.matchWeekPoll.prototype.initPollData = function(n) {
            var s = this,
                l = {
                    url: t.createPollQuestionUrl(s.pollName),
                    method: "GET",
                    callback: s.renderPoll,
                    target: this,
                    jsonpCallback: "onPoll",
                    forceCallback: !0,
                    forced: n
                };
            n || (l.interval = e.pollingCacheRate), s.getPoll || n ? n && a.data.manager.add(l) : s.getPoll = a.data.manager.add(l)
        }, e.matchWeekPoll.prototype.refreshPollData = function() {
            this.initPollData()
        }, e.matchWeekPoll.prototype.renderPoll = function(e, t) {
            var a = this;
            if (e && e.length > 0) {
                var n = !1,
                    l = !1;
                e.forEach((function(e) {
                    if (e.open) {
                        var t = s(e);
                        a.questionMap && a.questionMap[a.currentQuestion] && a.questionMap[a.currentQuestion].hasAnswer ? e.hasAnswer = !0 : e.hasAnswer = t, e.id == a.currentQuestion && JSON.stringify(a.questionMap[a.currentQuestion]) != JSON.stringify(e) && (l = !0), JSON.stringify(a.questionMap[e.id]) != JSON.stringify(e) && (n = !0), a.questionMap[e.id] = e
                    }
                })), (n || t.forced) && (a.getQuestionAmount(), a.renderAllQuestions()), null != a.currentQuestion && l && a.renderQuestion(a.currentQuestion)
            }
        }, e.matchWeekPoll.prototype.refreshAnswersAndQuestions = function(e) {
            var t = this;
            e.forEach((function(e) {
                var a = s(e);
                e.hasAnswer = a, t.questionMap[e.id] = e
            }))
        }, e.matchWeekPoll.prototype.renderQuestion = function(t) {
            var a = this;
            if (a.currentQuestion = t, a.allQuestionsContainer && a.allQuestionsContainer.length > 0 && (a.allQuestionsContainer[0].style.display = "none"), a.matchweekOptionsContainer && a.matchweekOptionsContainer.length > 0 && (a.matchweekOptionsContainer[0].style.display = "", a.matchWeekOptionRenderContainer && a.matchWeekOptionRenderContainer.length > 0)) {
                var n = a.questionMap[t];
                if (n) {
                    var s = "pollquestions";
                    n.hasAnswer && (s = "pollanswers");
                    var l = 0,
                        o = {
                            question: n,
                            idx: function() {
                                return l++
                            }
                        };
                    a.matchWeekOptionRenderContainer[0].innerHTML = Mustache.render(e.templates[s], o)
                }
            }
        }, e.matchWeekPoll.prototype.getQuestionAmount = function() {
            var t = this;
            if (t.fanPollQuestionNumberContainer && t.fanPollQuestionNumberContainer.length > 0) {
                var a = "";
                if (t.questionMap) {
                    var n = 0;
                    for (var s in t.questionMap) t.questionMap[s].hasAnswer || n++;
                    n > 0 && (a += Mustache.render(e.templates.pollquestionamount, {
                        number: n
                    }))
                }
                t.fanPollQuestionNumberContainer[0].innerHTML = a
            }
        }, e.matchWeekPoll.prototype.renderAllQuestions = function() {
            var t = this;
            if (t.allQuestionsContainer && t.allQuestionsContainer.length > 0) {
                var a = [],
                    s = [];
                for (var l in t.questionMap) t.questionMap[l].hasAnswer ? s.push(t.questionMap[l]) : a.push(t.questionMap[l]);
                var o = {
                    questions: a,
                    answers: s,
                    questionLabel: n.lookup("label.openquestions"),
                    answerLabel: n.lookup("label.answeredquestions")
                };
                t.allQuestionsContainer[0].innerHTML = Mustache.render(e.templates.allquestions, o)
            }
        };
        for (var l = document.querySelectorAll('[data-widget="match-week-poll"]'), o = 0; o < l.length; o++) new e.matchWeekPoll(l[o], {})
    }(PULSE.app, PULSE.app.common, PULSE.core, PULSE.I18N),
    function(e, t, a, n, s) {
        e.matchWeekTable = function(e, a) {
            let n = this;
            n.element = e, n.liveTableContainer = n.element.getElementsByClassName("liveTableContainer"), n.standingEntriesContainer = n.element.getElementsByClassName("standingEntriesContainer"), n.matchweekAmountContainer = n.element.getElementsByClassName("matchweekAmountContainer"), n.tableCloseButtonContainer = n.element.getElementsByClassName("tableCloseButtonContainer"), n.gameWeek = n.element.getAttribute("data-gameweek"), n.compSeason = n.element.getAttribute("data-compseason"), n.competition = n.element.getAttribute("data-competition"), n.gameweekAmount = n.element.getAttribute("data-gameweeknumber"), n.live = n.element.getAttribute("data-live"), n.liveLeague = n.element.getElementsByClassName("js-live-toggle-container"), n.setListeners(), t.style.toggleClass(n.element, "open"), n.compSeason && n.live && (n.shouldDisplayLiveLeague() ? n.getLiveFixtures() : n.getLiveTable(!1)), n.gameweekAmount && n.compSeason && n.checkSeasonAndGameweek(n.compSeason, n.gameweekAmount), n.gameWeek && n.getCompSeason()
        }, e.matchWeekTable.prototype.shouldDisplayLiveLeague = function() {
            let t = this;
            const a = e.competition.FIRST === parseInt(t.competition),
                n = parseInt(t.compSeason) === e.newSeason.FIRST;
            return t.liveLeague && n && a
        }, e.matchWeekTable.prototype.getLiveFixtures = function() {
            let e = this;
            e.liveFixtures = new a.liveFixtures({
                comps: e.competition,
                compSeason: e.compSeason,
                target: this,
                container: e.liveLeague[0],
                callback: e.gotLiveFixtures
            })
        }, e.matchWeekTable.prototype.gotLiveFixtures = function(e) {
            const t = e && e.length;
            this.getLiveTable(t)
        }, e.matchWeekTable.prototype.getCompSeason = function() {
            let a = {
                    id: this.gameWeek
                },
                n = {
                    url: e.common.createApiPath("gameweeks.single", a),
                    method: "GET",
                    callback: this.findCompSeason,
                    target: this
                };
            t.data.manager.add(n)
        }, e.matchWeekTable.prototype.findCompSeason = function(e) {
            let t = this;
            e && e.compSeason && (e.gameweeks && e.gameweeks.length > 0 && (t.compSeason = e.compSeason.id, t.gameweekAmount = e.gameweeks[0].gameweek, t.checkSeasonAndGameweek(t.compSeason, t.gameweekAmount)), e.compSeason.competition && (t.competition = e.compSeason.competition.id))
        }, e.matchWeekTable.prototype.checkSeasonAndGameweek = function(e, t) {
            let n = this;
            if (n.matchweekAmountContainer && n.matchweekAmountContainer.length > 0) {
                let e = s.lookup("label.matchweek") + " " + t;
                n.matchweekAmountContainer[0].innerHTML = e
            }
            n.checkGameweek = new a.checkGameweek({
                compSeason: e,
                gameWeek: t,
                target: this,
                callback: n.initLiveTable
            })
        }, e.matchWeekTable.prototype.toggleOpen = function() {
            let e = this;
            t.style.hasClass(e.element, "open") ? e.stopFeed() : e.startFeeds(), t.style.toggleClass(e.element, "open")
        }, e.matchWeekTable.prototype.startFeeds = function() {
            let e = this;
            e.livePoll && e.isLive && e.livePoll.start()
        }, e.matchWeekTable.prototype.setListeners = function() {
            let e = this;
            e.tableCloseButtonContainer && e.tableCloseButtonContainer.length > 0 && e.tableCloseButtonContainer[0].addEventListener("click", (function() {
                t.style.removeClass(e.element, "open"), e.stopFeed()
            }))
        }, e.matchWeekTable.prototype.initLiveTable = function(e) {
            let t = this;
            e && t.shouldDisplayLiveLeague() ? t.getLiveFixtures() : t.getLiveTable(!1)
        }, e.matchWeekTable.prototype.getLiveTable = function(t) {
            let a = this,
                n = {
                    compSeasons: a.compSeason,
                    altIds: !0
                };
            !t && a.gameweekAmount ? n.gameweekNumbers = "1-" + a.gameweekAmount : t && (n.live = !0);
            let s = {
                url: e.common.createApiPath("standings.all", n),
                method: "GET",
                callback: a.renderTable,
                target: this
            };
            t && (s.interval = 6e4, a.isLive = !0), this.startData(s)
        }, e.matchWeekTable.prototype.startData = function(e) {
            this.livePoll = t.data.manager.add(e)
        }, e.matchWeekTable.prototype.stopFeed = function() {
            let e = this;
            e.livePoll && e.livePoll.stop()
        }, e.matchWeekTable.prototype.renderTable = function(t) {
            let n = this;
            if (t && t.tables && n.standingEntriesContainer && n.standingEntriesContainer.length > 0) {
                t.tables;
                t.tables.forEach((function(t, s) {
                    let l = "";
                    t.entries && (t.entries.sort((function(e, t) {
                        return e.position - t.position
                    })), t.entries.forEach((function(t, n) {
                        let s = function(e) {
                            e.url = e.team && e.team.club ? a.generateContentUrl("team", e.team.club.id, e.team.club.name.replace(new RegExp(" ", "g"), "-")) : "", e.opta = e.team && e.team.altIds && e.team.altIds.opta ? e.team.altIds.opta : "", e.clubBadge = a.getClubBadge(e.opta, "20"), e.clubBadgeRetina = a.getClubBadge(e.opta, "20", !0);
                            let t = parseInt(e.overall.goalsDifference);
                            return e.overall.goalsDifference = t > 0 ? "+" + t : t, e.longName = e.team && e.team.shortName ? e.team.shortName : e.team.name, e.movement = "none", e.position < e.startingPosition ? e.movement = "up" : e.position > e.startingPosition && (e.movement = "down"), e.annotationClass = a.getTableRowClass(e), e
                        }(t);
                        l += Mustache.render(e.templates.matchweektable, s)
                    }))), n.standingEntriesContainer[s].innerHTML = l, e.clubBadge(n.standingEntriesContainer[s], !0)
                }))
            }
        };
        let l = document.querySelectorAll('[data-widget="match-week-table"]');
        Array.prototype.map.call(l, (function(t) {
            t = new e.matchWeekTable(t, {})
        }))
    }(PULSE.app, PULSE.core, PULSE.app.common, PULSE.ui, PULSE.I18N);