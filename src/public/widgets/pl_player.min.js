"use strict";
PULSE.app.templates.featuredplayerclub = '<a href="{{ url }}"> {{ clubName }} <span class="playerClub badge badge-image-container" data-widget="club-badge-image" data-size="20"> <img class="badge-image badge-image--20 js-badge-image" src="{{ clubBadge }}" srcset="{{ clubBadge }}, {{ clubBadgeRetina }} 2x"> </span> </a> ', PULSE.app.templates.overviewstatstable = '{{#stats}} <tr> <th scope="row">{{ label }}</th> <td>{{ stat }}</td> </tr> {{/stats}}',
    function(e, t, a) {
        e.FeaturedPlayer = function(t) {
            let a = this;
            a.element = t, a.template = a.element.getAttribute("data-template"), a.compSeason = a.element.getAttribute("data-comp-season"), a.clubContainer = a.element.querySelector(".js-player-club"), a.seasonTextContainer = a.element.querySelector(".js-player-comp-season"), a.requestConfig = {
                id: a.element.getAttribute("data-player-id"),
                comps: e.competition.FIRST,
                altIds: !0
            }, a.requestConfig.id && a.initData()
        }, e.FeaturedPlayer.prototype.initData = function() {
            let t = {
                url: e.common.createApiPath("players.history", this.requestConfig),
                method: "GET",
                callback: this.renderFeaturedPlayerMetaInfo,
                target: this
            };
            a.data.manager.add(t)
        }, e.FeaturedPlayer.prototype.renderFeaturedPlayerMetaInfo = function(a) {
            let r = this,
                l = {};
            if (a) {
                if (!a.currentTeam) return; {
                    const e = a.currentTeam.altIds ? a.currentTeam.altIds.opta : "";
                    l = {
                        url: t.generateContentUrl("club", a.currentTeam.id, a.currentTeam.club.name.replace(new RegExp(" ", "g"), "-")),
                        clubName: a.currentTeam.club.name,
                        altId: e,
                        clubBadge: t.getClubBadge(e, "20"),
                        clubBadgeRetina: t.getClubBadge(e, "20", !0)
                    }
                }
                if (a.teamHistory && a.teamHistory.details && a.teamHistory.details.length > 0 && r.compSeason)
                    for (let e = 0; e < a.teamHistory.details.length; e++) {
                        let n = a.teamHistory.details[e];
                        if (parseInt(n.season.competitions[0].compSeason.id) === parseInt(r.compSeason)) {
                            l = {
                                url: t.generateContentUrl("club", n.team.club.id, n.team.name.replace(new RegExp(" ", "g"), "-")),
                                clubName: n.team.name,
                                altId: n.team.altIds ? n.team.altIds.opta : "",
                                clubBadge: t.getClubBadge(n.team.altIds.opta, "20"),
                                clubBadgeRetina: t.getClubBadge(n.team.altIds.opta, "20", !0)
                            }, r.seasonTextContainer.innerHTML = n.season.competitions[0].compSeason.label;
                            break
                        }
                    }
                let n = Mustache.render(e.templates[r.template], l);
                r.clubContainer.innerHTML = n, e.clubBadge(r.clubContainer, !0)
            }
        };
        let r = document.querySelectorAll('[data-widget="featured-player"]');
        for (let t = 0; t < r.length; t++) new e.FeaturedPlayer(r[t])
    }(PULSE.app, PULSE.app.common, PULSE.core),
    function(e, t, a) {
        e.playerClubHistory = function(e, t) {
            this.element = e;
            var r = document.getElementsByClassName("playerHistoryExpand");
            this.historyCache = {}, Array.prototype.map.call(r, (function(e) {
                ["keypress", "click"].forEach((function(t) {
                    e.addEventListener(t, (function(e) {
                        if (13 === e.which || "click" === e.type) {
                            e.preventDefault();
                            var t = this.getAttribute("data-reveal");
                            if (t) {
                                var r = document.getElementsByClassName(t);
                                Array.prototype.map.call(r, (function(e) {
                                    a.style.toggleClass(e, "open")
                                })), a.style.toggleClass(this.parentNode, "expanded")
                            }
                        }
                    }))
                }))
            }))
        };
        for (var r = document.querySelectorAll('[data-widget="player-club-history"]'), l = 0; l < r.length; l++) new e.playerClubHistory(r[l], {})
    }(PULSE.app, PULSE.app.common, PULSE.core),
    function(e, t, a, r) {
        e.playerNav = function(e, t) {}, e.addWebViewLink = function(e) {
            let t, a = e.querySelectorAll(".btn-tab");
            for (let e = 0; e < a.length; e++) t = a[e].href, a[e].href = t + "?webview=true"
        };
        let l = document.querySelectorAll('[data-ui-more-nav="player-nav"]');
        for (let a = 0; a < l.length; a++) {
            t.style.hasClass(document.querySelector("body"), "webViewBody") && e.addWebViewLink(l[a]);
            let r = {
                navWrap: l[a],
                moreLabel: "More"
            };
            new PULSE.ui.moreNav(r)
        }
    }(PULSE.app, PULSE.core, PULSE.ui, PULSE.I18N),
    function(e, t, a, r) {
        var l = function(e, t) {
            if (t && t.length)
                for (var a = 0; a < t.length; a++)
                    if (e === t[a].name) return t[a].value;
            return 0
        };
        e.playerOverviewStats = function(e, t) {
            var a = this;
            a.element = e, a.config = t, a.statsTemplate = "overviewstatstable", a.positions = {
                D: ["appearances", "goals", "goal_assist", "clean_sheet"],
                G: ["appearances", "clean_sheet", "goals", "goal_assist"],
                M: ["appearances", "goals", "goal_assist"],
                F: ["appearances", "goals", "goal_assist"]
            }, a.getStats()
        }, e.playerOverviewStats.prototype.getStatModel = function(e, t) {
            var a = [],
                n = 0;
            for (n = 0; n < t.length; n++) {
                var o = l(t[n], e);
                a.push({
                    label: r.lookup("label.stat." + t[n]),
                    stat: o
                })
            }
            return a
        }, e.playerOverviewStats.prototype.getStats = function() {
            var t = this;
            t.requestConfig = {
                id: t.config.playerId,
                comps: e.competition.FIRST
            };
            var r = {
                url: e.common.createApiPath(t.config.path, t.requestConfig),
                method: "GET",
                callback: t.renderStats,
                constant: !0,
                target: this
            };
            a.data.manager.add(r)
        }, e.playerOverviewStats.prototype.renderStats = function(t) {
            var a = this,
                r = a.getStatModel(t.stats, a.positions[t.entity.info.position]),
                l = Mustache.render(e.templates[a.statsTemplate], {
                    stats: r
                });
            a.element.innerHTML = l
        };
        var n = document.querySelectorAll('[data-widget="player-overview-stats"]');
        n = Array.prototype.map.call(n, (function(t) {
            var a = {
                playerId: t.getAttribute("data-player"),
                path: "stats.player"
            };
            return new e.playerOverviewStats(t, a)
        }))
    }(PULSE.app, PULSE.app.common, PULSE.core, PULSE.I18N);